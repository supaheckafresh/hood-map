!function(){"use strict";var e=function(e){this.title=e,this.results=ko.observableArray(),this.visible=ko.observable(!0),this.checked=ko.observable(!0),this.hasFilterResults=ko.observable()};e.prototype.toggleMarkersVisible=function(){var e=this;if(e.toggleChecked(),e.results().length>0){var o=_.head(e.results());null!==o().marker.getMap()&&(e.mapReference=o().marker.getMap()),_.each(e.results(),function(o){null===o().marker.getMap()?o().marker.setMap(e.mapReference):o().marker.setMap(null)})}return!0},e.prototype.toggleChecked=function(){var e=this;return e.checked(!e.checked()),!0},window.Activity=e}(),function(){"use strict";var e=function(e){this.name=ko.observable(e.name),this.visible=ko.observable(!0),this.selected=ko.observable(!1),this.place_id=ko.observable(e.place_id),this.formatted_address=ko.observable(e.formatted_address),this.geometry=ko.observable(e.geometry),this.types=ko.observableArray(e.types),this.marker=null,this.foursquareQueryUrl=ko.observable(""),this.checkins=ko.observable()};e.prototype.contains=function(e,o){return o===!0?this.name().includes(e):this.name().toLowerCase().indexOf(e.toLowerCase())>-1},e.prototype.shortLatLng=function(){return Math.round(1e3*this.geometry().location.lat())/1e3+","+Math.round(1e3*this.geometry().location.lng())/1e3},e.prototype.getColor=function(){var e=this.checkins();switch(!0){case e>1e3:return"1";case e>600:return"2";case e>350:return"3";case e>120:return"4";case e>60:return"5";case e>30:return"6";case e>16:return"7";default:return"7"}},window.Location=e}(),function(){"use strict";var e=function(e){var o,t,n=this;n.infoWindow=ko.observable(),n.readyState=ko.observable(!1);var i={searchStr:"Long Beach, CA",center:{lat:33.77,lng:-118.194}};n.geolocationName=ko.observable(i.searchStr),n.cachedgeolocationName=ko.observable(i.searchStr),n.currentGeolocation=ko.observable(),n.locationsVm={},n.selectedLocation=ko.observable(),n.updateGeolocation=function(){""!==n.geolocationName().trim()?n.geo(n.geolocationName()):n.geolocationName(n.cachedgeolocationName())},n.initMap=function(){o=new google.maps.Map(document.getElementById("map"),{center:i.center,zoom:15,mapTypeId:google.maps.MapTypeId.TERRAIN}),console.log("Google Maps API has been called."),t=new google.maps.Geocoder,n.initInfoWindow(),n.placesService=new google.maps.places.PlacesService(o),n.placesService?(console.log("Google Places service has been initialized."),google.maps.event.addListenerOnce(o,"idle",function(){o.center?(n.readyState(!0),console.log("Google Maps has loaded successfully.")):alert("There was a problem loading the map.")})):alert("There was an error initializing Google Places service."),n.mapCopy=o},n.geo=function(e){t.geocode({address:e},function(t,i){i==google.maps.GeocoderStatus.OK?(n.cachedgeolocationName(e),o.setCenter(t[0].geometry.location),n.currentGeolocation({center:{lat:t[0].geometry.location.lat(),lng:t[0].geometry.location.lng()}}),n.initInfoWindow(),n.mapCopy=o,console.log("Location has been set to: "+e)):(n.geolocationName(n.cachedgeolocationName()),alert("Geocoding was unsuccessful for the following reason: "+i))})},n.initInfoWindow=function(){n.infoWindow(new google.maps.InfoWindow),$.ajax("./build/components/infowindow/infowindow.html").done(function(e){n.infoWindow().setContent(e),n.infoWindow().open(null);var o=!1;google.maps.event.addListener(n.infoWindow(),"domready",function(){o===!1&&(ko.applyBindings(n,document.getElementById("infowindow-overlay")),o=!0)}),google.maps.event.addListener(n.infoWindow(),"closeclick",function(){o=!1,n.initInfoWindow()})})},n.resetInfoWindow=function(){n.infoWindow().open(null),n.initInfoWindow()},n.centerMapAt=function(e){var t=new google.maps.LatLng(e.geometry().location.lat(),e.geometry().location.lng());o.panTo(t),n.mapCopy=o},n.addMarker=function(e,t,i){var a=t().visible()?o:null,s=new google.maps.Marker({map:a,title:e().name(),icon:"build/images/markers/marker_"+i+".png",position:e().geometry().location,id:e().place_id(),animation:google.maps.Animation.DROP});return function(o){google.maps.event.addListener(o,"click",function(){n.locationsVm.selectLocation(e()),n.showInfoWindow(e()),n.bounceAnimate(this)})}(s),s},n.showInfoWindow=function(e){n.infoWindow().open(o,e.marker)},n.showMarkersForVisibleActivities=function(e){_.each(e(),function(e){e().visible()===!0&&_.each(e().results(),function(e){n.showMarker(e)})})},n.hideMarker=function(e){e().marker.setMap(null)},n.showMarker=function(e){e().marker.getMap()!=o&&n.dropAnimate(e().marker)},n.dropAnimate=function(e){e.setMap(o),e.setAnimation(google.maps.Animation.DROP)},n.bounceAnimate=function(e){e.setAnimation(google.maps.Animation.BOUNCE),setTimeout(function(){e.setAnimation(null)},2125)},window.initMap=n.initMap,window.mapCopy=n.mapCopy};window.MapViewModel=e}(),function(){"use strict";var e=function(){var e=this;e.makeQueryUrl=function(e){var o="https://api.foursquare.com/v2/venues/search",t="?client_id=PUXBJCP4B4HB2KIDIGQPHXEBAKWZPZO4HOWJZAJT45MOYWDO",n="&client_secret=D3NFA3PT5NC5440E5SJEOBJYYDN1BY20AASGXGF012F5Y1ND",i="&v=20130815",a="&ll="+e().shortLatLng(),s="&query="+e().name().split(" ").join("%20"),r="&limit=1";e().foursquareQueryUrl(o+t+n+i+a+s+r)},e.getCheckinsCountFor=function(e,o,t){ko.computed(function(){$.getJSON(e().foursquareQueryUrl()).then(function(n){if(n.response.venues.length>0){var i=n.response.venues[0].stats.checkinsCount;i?e().checkins(i):e().checkins(0)}else e().checkins(0);var a=e().getColor();e().marker=t(e,o,a)}).fail(function(){console.log("*****There was an error retrieving foursquare info for "+e().name()+"*****")})},this)}};window.foursquareService=e}(),function(){"use strict";var e=function(e,o){var t=this;t.filterQuery=ko.observable(""),t.selectedLocation=ko.observable("hello"),t.searchLocations=function(o){function n(n,a){if(a===google.maps.places.PlacesServiceStatus.OK&&n.length>0){var s=i(n);s.length>0?(_.each(s,function(n){var i=ko.observable(new Location(n));t.requestFoursquareData(i,o,e.addMarker),o().results.push(i)}),o().noResultsForLastGeolocation&&(o().noResultsForLastGeolocation=!1,o().visible(!0)),t.activities.push(o)):(o().visible(!1),o().noResultsForLastGeolocation=!0,t.activities.push(o),alert("Sorry, there are no locations for "+o().title+" in the current map bounds."))}else alert("Sorry, there was a problem retrieving results for the following reason: "+a)}function i(e){var o,t,n=[];return _.each(e,function(e){o=e.geometry.location.lat(),t=e.geometry.location.lng(),a.H.H<o&&o<a.H.j&&a.j.H>t&&t>a.j.j&&n.push(e)}),n}var a=e.mapCopy.getBounds();e.placesService.textSearch({bounds:a,query:o().title},n)},t.requestFoursquareData=function(e,t,n){o.makeQueryUrl(e),o.getCheckinsCountFor(e,t,n)},t.filterQuery.subscribe(function(){function o(){var o;_.each(t.activities(),function(n){n().results().length>0&&(_.each(n().results(),function(i){i().contains(t.filterQuery())?(i().visible(!0),n().hasFilterResults(!0),n().checked()===!0&&(e.showMarker(i),i().selected()===!0&&e.infoWindow().open(e.mapCopy,i().marker))):(i().visible(!1),e.hideMarker(i),i().selected()===!0&&e.resetInfoWindow(),o=!1,n().hasFilterResults(!1))}),_.some(n().results(),function(e){e().visible()&&n().checked()===!0&&(o=!0,n().hasFilterResults(!0))}),n().visible(o))})}function n(){return""===t.filterQuery().trim()}function i(){function e(e){0===e().results().length&&e().visible(!1),e().checked()===!0?e().results().length>0&&(e().visible(!0),e().hasFilterResults(!0)):e().results().length>0&&e().hasFilterResults(!0)}_.each(t.activities(),function(o){_.each(o().results(),function(e){e().visible(!0)}),e(o)})}n()?(i(),e.showMarkersForVisibleActivities(t.activities)):o()}),t.preventDefault=function(){},e.currentGeolocation.subscribe(function(){var e=t.activities();_.each(t.activities(),function(e){_.each(e().results(),function(e){e().marker.setMap(null)}),e().results([])}),t.activities([]),_.each(e,function(e){t.searchLocations(e)})}),t.selectLocation=function(o){t.clearCurrentSelections(),o.selected(!0),t.selectedLocation(o),e.showInfoWindow(o),e.centerMapAt(o),e.bounceAnimate(o.marker)},t.clearCurrentSelections=function(){_.each(t.activities(),function(e){_.each(e().results(),function(e){e().selected(!1)})})},t.assignColorsToLocations=function(){},t.getReferenceToActivitiesObject=function(e){t.activities=e},t.passSelfToMapVm=function(){e.locationsVm=t},t.passSelfToMapVm(),t.passSelectedLocationToMapVm=function(){e.selectedLocation(t.selectedLocation)},t.selectedLocation.subscribe(function(){t.passSelectedLocationToMapVm()})};window.LocationsViewModel=e}(),function(){"use strict";var e=function(e,o){var t=this;t.defaultActivities=["Coffee","Vegetarian","Park","Mexican","Art Gallery"],t.activities=ko.observableArray(),t.activityQuery=ko.observable(),e.readyState.subscribe(function(){e.readyState()===!0&&t.displayDefaultActivities()}),t.displayDefaultActivities=function(){t.passReferenceToLocationsVm(),_.each(t.defaultActivities,function(e){var t=ko.observable(new Activity(e));o.searchLocations(t)})},t.addActivity=function(){var e=ko.observable(new Activity(t.activityQuery()));o.searchLocations(e),t.activityQuery("")},t.passReferenceToLocationsVm=function(){o.getReferenceToActivitiesObject(t.activities)},t.activities.subscribe(function(){t.passReferenceToLocationsVm()}),t.resetInfoWindowWhenSelectedLocationToggledVisible=function(o){return _.each(o.results(),function(t){if(t().selected()===!0)switch(o.checked()){case!1:e.resetInfoWindow();break;case!0:e.infoWindow().open(e.mapCopy,t().marker)}}),!0}};window.ActivitiesViewModel=e}(),function(){"use strict";var e=function(){var e=this;e.foursquareService=new foursquareService,e.MapViewModel=new MapViewModel(e.foursquareService),e.LocationsViewModel=new LocationsViewModel(e.MapViewModel,e.foursquareService),e.ActivitiesViewModel=new ActivitiesViewModel(e.MapViewModel,e.LocationsViewModel)};window.AppViewModel=e}(),function(){"use strict";function e(e){var t,n,i,a;_.each(e,function(e){var s="#overlay-"+e;t=$("<div>"),n="./build/components/"+e+"/"+e+".html",i="#"+e,t.load(n,i,function(){a=$(this).prop("outerHTML"),$(s).append(a),ko.applyBindings(o,document.getElementById(e))})})}var o=new AppViewModel;e(["searchbar","sidebar"]),$(document).ready(function(){$("#overlay-searchbar").draggable(),$("#overlay-sidebar").draggable()})}();
//# sourceMappingURL=data:application/json;base64,
