!function(){"use strict";var e=function(e){this.title=e,this.results=ko.observableArray(),this.visible=ko.observable(!0),this.checked=ko.observable(!0),this.hasFilterResults=ko.observable()};e.prototype.toggleMarkersVisible=function(){var e=this;if(e.toggleChecked(),e.results().length>0){var o=_.head(e.results());null!==o().marker.getMap()&&(e.mapReference=o().marker.getMap()),_.each(e.results(),function(o){null===o().marker.getMap()?o().marker.setMap(e.mapReference):o().marker.setMap(null)})}return!0},e.prototype.toggleChecked=function(){var e=this;return e.checked(!e.checked()),!0},window.Activity=e}(),function(){"use strict";var e=function(e){this.name=ko.observable(e.name),this.visible=ko.observable(!0),this.selected=ko.observable(!1),this.place_id=ko.observable(e.place_id),this.formatted_address=ko.observable(e.formatted_address),this.geometry=ko.observable(e.geometry),this.types=ko.observableArray(e.types),this.marker=null,this.foursquareQueryUrl=ko.observable(""),this.checkins=ko.observable()};e.prototype.contains=function(e,o){return o===!0?this.name().includes(e):this.name().toLowerCase().indexOf(e.toLowerCase())>-1},e.prototype.shortLatLng=function(){return Math.round(1e3*this.geometry().location.lat())/1e3+","+Math.round(1e3*this.geometry().location.lng())/1e3},e.prototype.getColor=function(){var e=this.checkins();switch(!0){case e>1e3:return"1";case e>600:return"2";case e>350:return"3";case e>120:return"4";case e>60:return"5";case e>30:return"6";case e>16:return"7";default:return"7"}},window.Location=e}(),function(){"use strict";var e=function(e){var o=this;window.map=null;var t;o.infoWindow=ko.observable(),o.readyState=ko.observable(!1);var i={searchStr:"Long Beach, CA",center:{lat:33.77,lng:-118.194}};o.geolocationName=ko.observable(i.searchStr),o.cachedgeolocationName=ko.observable(i.searchStr),o.currentGeolocation=ko.observable(),o.locationsVm={},o.selectedLocation=ko.observable(),o.updateGeolocation=function(){""!==o.geolocationName().trim()?o.geo(o.geolocationName()):o.geolocationName(o.cachedgeolocationName())},window.initMap=function(){window.map=new google.maps.Map(document.getElementById("map"),{zoom:15,mapTypeId:google.maps.MapTypeId.TERRAIN}),console.log("Google Maps API has been called."),t=new google.maps.Geocoder,o.geo(o.geolocationName()),o.initInfoWindow(),o.placesService=new google.maps.places.PlacesService(map),o.placesService?(console.log("Google Places service has been initialized."),google.maps.event.addListenerOnce(map,"idle",function(){map.center?(o.readyState(!0),console.log("Google Maps has loaded successfully.")):alert("There was a problem loading the map.")})):alert("There was an error initializing Google Places service.")},o.geo=function(e){t.geocode({address:e},function(t,i){i==google.maps.GeocoderStatus.OK?(o.cachedgeolocationName(e),map.setCenter(t[0].geometry.location),o.currentGeolocation({center:{lat:t[0].geometry.location.lat(),lng:t[0].geometry.location.lng()}}),o.initInfoWindow(),console.log("Location has been set to: "+e)):(o.geolocationName(o.cachedgeolocationName()),alert("Geocoding was unsuccessful for the following reason: "+i))})},o.initInfoWindow=function(){o.infoWindow(new google.maps.InfoWindow),$.ajax("./build/components/infowindow/infowindow.html").done(function(e){o.infoWindow().setContent(e),o.infoWindow().open(null);var t=!1;google.maps.event.addListener(o.infoWindow(),"domready",function(){t===!1&&(ko.applyBindings(o,document.getElementById("infowindow-overlay")),t=!0)}),google.maps.event.addListener(o.infoWindow(),"closeclick",function(){t=!1,o.initInfoWindow()})})},o.resetInfoWindow=function(){o.infoWindow().open(null),o.initInfoWindow()},o.centerMapAt=function(e){var o=new google.maps.LatLng(e.geometry().location.lat(),e.geometry().location.lng());map.panTo(o)},o.addMarker=function(e,t,i){var n=t().visible()?map:null,a=new google.maps.Marker({map:n,title:e().name(),icon:"build/images/markers/marker_"+i+".png",position:e().geometry().location,id:e().place_id(),animation:google.maps.Animation.DROP});return function(t){google.maps.event.addListener(t,"click",function(){o.locationsVm.selectLocation(e()),o.showInfoWindow(e()),o.bounceAnimate(this)})}(a),a},o.showInfoWindow=function(e){o.infoWindow().open(map,e.marker)},o.showMarkersForVisibleActivities=function(e){_.each(e(),function(e){e().visible()===!0&&_.each(e().results(),function(e){o.showMarker(e)})})},o.hideMarker=function(e){e().marker.setMap(null)},o.showMarker=function(e){e().marker.getMap()!=map&&o.dropAnimate(e().marker)},o.dropAnimate=function(e){e.setMap(map),e.setAnimation(google.maps.Animation.DROP)},o.bounceAnimate=function(e){e.setAnimation(google.maps.Animation.BOUNCE),setTimeout(function(){e.setAnimation(null)},2125)}};window.MapViewModel=e}(),function(){"use strict";var e=function(){var e=this;e.makeQueryUrl=function(e){var o="https://api.foursquare.com/v2/venues/search",t="?client_id=PUXBJCP4B4HB2KIDIGQPHXEBAKWZPZO4HOWJZAJT45MOYWDO",i="&client_secret=D3NFA3PT5NC5440E5SJEOBJYYDN1BY20AASGXGF012F5Y1ND",n="&v=20130815",a="&ll="+e().shortLatLng(),s="&query="+e().name().split(" ").join("%20"),r="&limit=1";e().foursquareQueryUrl(o+t+i+n+a+s+r)},e.getCheckinsCountFor=function(e,o,t){ko.computed(function(){$.getJSON(e().foursquareQueryUrl()).then(function(i){if(i.response.venues.length>0){var n=i.response.venues[0].stats.checkinsCount;n?e().checkins(n):e().checkins(0)}else e().checkins(0);var a=e().getColor();e().marker=t(e,o,a)}).fail(function(){console.log("*****There was an error retrieving foursquare info for "+e().name()+"*****")})},this)}};window.foursquareService=e}(),function(){"use strict";var e=function(e,o){var t=this;t.filterQuery=ko.observable(""),t.selectedLocation=ko.observable("hello"),t.activities=ko.observableArray([]),t.searchLocations=function(o){function i(i,a){if(a===google.maps.places.PlacesServiceStatus.OK&&i.length>0){var s=n(i);s.length>0?(_.each(s,function(i){var n=ko.observable(new Location(i));t.requestFoursquareData(n,o,e.addMarker),o().results.push(n)}),o().noResultsForLastGeolocation&&(o().noResultsForLastGeolocation=!1,o().visible(!0)),t.activities.push(o)):(o().visible(!1),o().noResultsForLastGeolocation=!0,t.activities.push(o),alert("Sorry, there are no locations for "+o().title+" in the current map bounds."))}else alert("Sorry, there was a problem retrieving results for the following reason: "+a)}function n(e){var o,t,i=[];return _.each(e,function(e){o=e.geometry.location.lat(),t=e.geometry.location.lng(),a.H.H<o&&o<a.H.j&&a.j.H>t&&t>a.j.j&&i.push(e)}),i}var a=window.map.getBounds();e.placesService.textSearch({bounds:a,query:o().title},i)},t.requestFoursquareData=function(e,t,i){o.makeQueryUrl(e),o.getCheckinsCountFor(e,t,i)},t.filterQuery.subscribe(function(){function o(){var o;_.each(t.activities(),function(i){i().results().length>0&&(_.each(i().results(),function(n){n().contains(t.filterQuery())?(n().visible(!0),i().hasFilterResults(!0),i().checked()===!0&&(e.showMarker(n),n().selected()===!0&&e.infoWindow().open(window.map,n().marker))):(n().visible(!1),e.hideMarker(n),n().selected()===!0&&e.resetInfoWindow(),o=!1,i().hasFilterResults(!1))}),_.some(i().results(),function(e){e().visible()&&i().checked()===!0&&(o=!0,i().hasFilterResults(!0))}),i().visible(o))})}function i(){return""===t.filterQuery().trim()}function n(){function e(e){0===e().results().length&&e().visible(!1),e().checked()===!0?e().results().length>0&&(e().visible(!0),e().hasFilterResults(!0)):e().results().length>0&&e().hasFilterResults(!0)}_.each(t.activities(),function(o){_.each(o().results(),function(e){e().visible(!0)}),e(o)})}i()?(n(),e.showMarkersForVisibleActivities(t.activities)):o()}),t.preventDefault=function(){},e.currentGeolocation.subscribe(function(){var e;t.activities()&&(e=t.activities()),_.each(t.activities(),function(e){_.each(e().results(),function(e){e().marker.setMap(null)}),e().results([])}),t.activities([]),_.each(e,function(e){t.searchLocations(e)})}),t.selectLocation=function(o){t.clearCurrentSelections(),o.selected(!0),t.selectedLocation(o),e.showInfoWindow(o),e.centerMapAt(o),e.bounceAnimate(o.marker)},t.clearCurrentSelections=function(){_.each(t.activities(),function(e){_.each(e().results(),function(e){e().selected(!1)})})},t.assignColorsToLocations=function(){},t.getReferenceToActivitiesObject=function(e){t.activities=e},t.passSelfToMapVm=function(){e.locationsVm=t},t.passSelfToMapVm(),t.passSelectedLocationToMapVm=function(){e.selectedLocation(t.selectedLocation)},t.selectedLocation.subscribe(function(){t.passSelectedLocationToMapVm()})};window.LocationsViewModel=e}(),function(){"use strict";var e=function(e,o){var t=this;t.defaultActivities=["Coffee","Vegetarian","Park","Mexican","Art Gallery"],t.activities=ko.observableArray(),t.activityQuery=ko.observable(),e.readyState.subscribe(function(){e.readyState()===!0&&t.displayDefaultActivities()}),t.displayDefaultActivities=function(){t.passReferenceToLocationsVm(),_.each(t.defaultActivities,function(e){var t=ko.observable(new Activity(e));o.searchLocations(t)})},t.addActivity=function(){var e=ko.observable(new Activity(t.activityQuery()));o.searchLocations(e),t.activityQuery("")},t.passReferenceToLocationsVm=function(){o.getReferenceToActivitiesObject(t.activities)},t.activities.subscribe(function(){t.passReferenceToLocationsVm()}),t.resetInfoWindowWhenSelectedLocationToggledVisible=function(o){return _.each(o.results(),function(t){if(t().selected()===!0)switch(o.checked()){case!1:e.resetInfoWindow();break;case!0:e.infoWindow().open(window.map,t().marker)}}),!0}};window.ActivitiesViewModel=e}(),function(){"use strict";var e=function(){var e=this;e.foursquareService=new foursquareService,e.MapViewModel=new MapViewModel(e.foursquareService),e.LocationsViewModel=new LocationsViewModel(e.MapViewModel,e.foursquareService),e.ActivitiesViewModel=new ActivitiesViewModel(e.MapViewModel,e.LocationsViewModel)};window.AppViewModel=e}(),function(){"use strict";function e(e){var t,i,n,a;_.each(e,function(e){var s="#overlay-"+e;t=$("<div>"),i="./build/components/"+e+"/"+e+".html",n="#"+e,t.load(i,n,function(){a=$(this).prop("outerHTML"),$(s).append(a),ko.applyBindings(o,document.getElementById(e))})})}var o=new AppViewModel;e(["searchbar","sidebar"]),$(document).ready(function(){$("#overlay-searchbar").draggable(),$("#overlay-sidebar").draggable(),$(document).on("click","#toggle-minimize-sidebar",function(){$(this).parent().toggleClass("show")})})}();
//# sourceMappingURL=data:application/json;base64,
