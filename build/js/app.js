!function(){"use strict";var e=function(e){this.title=e,this.results=ko.observableArray(),this.visible=ko.observable(!0),this.checked=ko.observable(!0),this.hasFilterResults=ko.observable()};e.prototype.toggleMarkersVisible=function(){var e=this;if(e.toggleChecked(),e.results().length>0){var o=_.head(e.results());null!==o().marker.getMap()&&(e.mapReference=o().marker.getMap()),_.each(e.results(),function(o){null===o().marker.getMap()?o().marker.setMap(e.mapReference):o().marker.setMap(null)})}return!0},e.prototype.toggleChecked=function(){var e=this;return e.checked(!e.checked()),!0},window.Activity=e}(),function(){"use strict";var e=function(e){this.name=ko.observable(e.name),this.visible=ko.observable(!0),this.selected=ko.observable(!1),this.place_id=ko.observable(e.place_id),this.formatted_address=ko.observable(e.formatted_address),this.geometry=ko.observable(e.geometry),this.types=ko.observableArray(e.types),this.marker=null,this.foursquareQueryUrl=ko.observable(""),this.checkins=ko.observable()};e.prototype.contains=function(e,o){return o===!0?this.name().includes(e):this.name().toLowerCase().indexOf(e.toLowerCase())>-1},e.prototype.shortLatLng=function(){return Math.round(1e3*this.geometry().location.lat())/1e3+","+Math.round(1e3*this.geometry().location.lng())/1e3},e.prototype.getColor=function(){var e=this.checkins();switch(!0){case e>1e3:return"1";case e>600:return"2";case e>350:return"3";case e>120:return"4";case e>60:return"5";case e>30:return"6";case e>16:return"7";default:return"7"}},window.Location=e}(),function(){"use strict";var e=function(e){var o=this;window.map=null;var t;o.infoWindow=ko.observable(),o.readyState=ko.observable(!1);var i={searchStr:"Long Beach, CA",center:{lat:33.77,lng:-118.194}};o.geolocationName=ko.observable(i.searchStr),o.cachedgeolocationName=ko.observable(i.searchStr),o.currentGeolocation=ko.observable(),o.locationsVm={},o.selectedLocation=ko.observable(),o.updateGeolocation=function(){""!==o.geolocationName().trim()?o.geo(o.geolocationName()):o.geolocationName(o.cachedgeolocationName())},window.initMap=function(){window.map=new google.maps.Map(document.getElementById("map"),{zoom:15,mapTypeId:google.maps.MapTypeId.TERRAIN}),console.log("Google Maps API has been called."),t=new google.maps.Geocoder,o.geo(o.geolocationName()),o.initInfoWindow(),o.placesService=new google.maps.places.PlacesService(map),o.placesService?(console.log("Google Places service has been initialized."),google.maps.event.addListenerOnce(map,"idle",function(){map.center?(o.readyState(!0),console.log("Google Maps has loaded successfully.")):alert("There was a problem loading the map.")})):alert("There was an error initializing Google Places service.")},o.geo=function(e){t.geocode({address:e},function(t,i){i==google.maps.GeocoderStatus.OK?(o.cachedgeolocationName(e),map.setCenter(t[0].geometry.location),o.currentGeolocation({center:{lat:t[0].geometry.location.lat(),lng:t[0].geometry.location.lng()}}),o.initInfoWindow(),console.log("Location has been set to: "+e)):(o.geolocationName(o.cachedgeolocationName()),alert("Geocoding was unsuccessful for the following reason: "+i))})},o.initInfoWindow=function(){o.infoWindow(new google.maps.InfoWindow),$.ajax("./build/components/infowindow/infowindow.html").done(function(e){o.infoWindow().setContent(e),o.infoWindow().open(null);var t=!1;google.maps.event.addListener(o.infoWindow(),"domready",function(){t===!1&&(ko.applyBindings(o,document.getElementById("infowindow-overlay")),t=!0)}),google.maps.event.addListener(o.infoWindow(),"closeclick",function(){t=!1,o.initInfoWindow()})})},o.resetInfoWindow=function(){o.infoWindow().open(null),o.initInfoWindow()},o.centerMapAt=function(e){var o=new google.maps.LatLng(e.geometry().location.lat(),e.geometry().location.lng());map.panTo(o)},o.addMarker=function(e,t,i){var n=t().visible()?map:null,a=new google.maps.Marker({map:n,title:e().name(),icon:"build/images/markers/marker_"+i+".png",position:e().geometry().location,id:e().place_id(),animation:google.maps.Animation.DROP});return function(t){google.maps.event.addListener(t,"click",function(){o.locationsVm.selectLocation(e()),o.showInfoWindow(e()),o.bounceAnimate(this)})}(a),a},o.showInfoWindow=function(e){o.infoWindow().open(map,e.marker)},o.showMarkersForVisibleActivities=function(e){_.each(e(),function(e){e().visible()===!0&&_.each(e().results(),function(e){o.showMarker(e)})})},o.hideMarker=function(e){e().marker.setMap(null)},o.showMarker=function(e){e().marker.getMap()!=map&&o.dropAnimate(e().marker)},o.dropAnimate=function(e){e.setMap(map),e.setAnimation(google.maps.Animation.DROP)},o.bounceAnimate=function(e){e.setAnimation(google.maps.Animation.BOUNCE),setTimeout(function(){e.setAnimation(null)},2125)}};window.MapViewModel=e}(),function(){"use strict";var e=function(){var e=this;e.makeQueryUrl=function(e){var o="https://api.foursquare.com/v2/venues/search",t="?client_id=PUXBJCP4B4HB2KIDIGQPHXEBAKWZPZO4HOWJZAJT45MOYWDO",i="&client_secret=D3NFA3PT5NC5440E5SJEOBJYYDN1BY20AASGXGF012F5Y1ND",n="&v=20130815",a="&ll="+e().shortLatLng(),s="&query="+e().name().split(" ").join("%20"),r="&limit=1";e().foursquareQueryUrl(o+t+i+n+a+s+r)},e.getCheckinsCountFor=function(e,o,t){ko.computed(function(){$.getJSON(e().foursquareQueryUrl()).then(function(i){if(i.response.venues.length>0){var n=i.response.venues[0].stats.checkinsCount;n?e().checkins(n):e().checkins(0)}else e().checkins(0);var a=e().getColor();e().marker=t(e,o,a)}).fail(function(){console.log("*****There was an error retrieving foursquare info for "+e().name()+"*****")})},this)}};window.foursquareService=e}(),function(){"use strict";var e=function(e,o){var t=this;t.filterQuery=ko.observable(""),t.selectedLocation=ko.observable("hello"),t.activities=ko.observableArray([]),t.searchLocations=function(o){function i(i,a){if(a===google.maps.places.PlacesServiceStatus.OK&&i.length>0){var s=n(i);s.length>0?(_.each(s,function(i){var n=ko.observable(new Location(i));t.requestFoursquareData(n,o,e.addMarker),o().results.push(n)}),o().noResultsForLastGeolocation&&(o().noResultsForLastGeolocation=!1,o().visible(!0)),t.activities.push(o)):(o().visible(!1),o().noResultsForLastGeolocation=!0,t.activities.push(o),alert("Sorry, there are no locations for "+o().title+" in the current map bounds."))}else alert("Sorry, there was a problem retrieving results for the following reason: "+a)}function n(e){var o,t,i=[];return _.each(e,function(e){o=e.geometry.location.lat(),t=e.geometry.location.lng(),a.H.H<o&&o<a.H.j&&a.j.H>t&&t>a.j.j&&i.push(e)}),i}var a=window.map.getBounds();e.placesService.textSearch({bounds:a,query:o().title},i)},t.requestFoursquareData=function(e,t,i){o.makeQueryUrl(e),o.getCheckinsCountFor(e,t,i)},t.filterQuery.subscribe(function(){function o(){var o;_.each(t.activities(),function(i){i().results().length>0&&(_.each(i().results(),function(n){n().contains(t.filterQuery())?(n().visible(!0),i().hasFilterResults(!0),i().checked()===!0&&(e.showMarker(n),n().selected()===!0&&e.infoWindow().open(window.map,n().marker))):(n().visible(!1),e.hideMarker(n),n().selected()===!0&&e.resetInfoWindow(),o=!1,i().hasFilterResults(!1))}),_.some(i().results(),function(e){e().visible()&&i().checked()===!0&&(o=!0,i().hasFilterResults(!0))}),i().visible(o))})}function i(){return""===t.filterQuery().trim()}function n(){function e(e){0===e().results().length&&e().visible(!1),e().checked()===!0?e().results().length>0&&(e().visible(!0),e().hasFilterResults(!0)):e().results().length>0&&e().hasFilterResults(!0)}_.each(t.activities(),function(o){_.each(o().results(),function(e){e().visible(!0)}),e(o)})}i()?(n(),e.showMarkersForVisibleActivities(t.activities)):o()}),t.preventDefault=function(){},e.currentGeolocation.subscribe(function(){var e;t.activities()&&(e=t.activities()),_.each(t.activities(),function(e){_.each(e().results(),function(e){e().marker.setMap(null)}),e().results([])}),t.activities([]),_.each(e,function(e){t.searchLocations(e)})}),t.selectLocation=function(o){t.clearCurrentSelections(),o.selected(!0),t.selectedLocation(o),e.showInfoWindow(o),e.centerMapAt(o),e.bounceAnimate(o.marker)},t.clearCurrentSelections=function(){_.each(t.activities(),function(e){_.each(e().results(),function(e){e().selected(!1)})})},t.assignColorsToLocations=function(){},t.getReferenceToActivitiesObject=function(e){t.activities=e},t.passSelfToMapVm=function(){e.locationsVm=t},t.passSelfToMapVm(),t.passSelectedLocationToMapVm=function(){e.selectedLocation(t.selectedLocation)},t.selectedLocation.subscribe(function(){t.passSelectedLocationToMapVm()})};window.LocationsViewModel=e}(),function(){"use strict";var e=function(e,o){var t=this;t.defaultActivities=["Coffee","Vegetarian","Park","Mexican","Art Gallery"],t.activities=ko.observableArray(),t.activityQuery=ko.observable(),e.readyState.subscribe(function(){e.readyState()===!0&&t.displayDefaultActivities()}),t.displayDefaultActivities=function(){t.passReferenceToLocationsVm(),_.each(t.defaultActivities,function(e){var t=ko.observable(new Activity(e));o.searchLocations(t)})},t.addActivity=function(){var e=ko.observable(new Activity(t.activityQuery()));o.searchLocations(e),t.activityQuery("")},t.passReferenceToLocationsVm=function(){o.getReferenceToActivitiesObject(t.activities)},t.activities.subscribe(function(){t.passReferenceToLocationsVm()}),t.resetInfoWindowWhenSelectedLocationToggledVisible=function(o){return _.each(o.results(),function(t){if(t().selected()===!0)switch(o.checked()){case!1:e.resetInfoWindow();break;case!0:e.infoWindow().open(window.map,t().marker)}}),!0}};window.ActivitiesViewModel=e}(),function(){"use strict";var e=function(){var e=this;e.foursquareService=new foursquareService,e.MapViewModel=new MapViewModel(e.foursquareService),e.LocationsViewModel=new LocationsViewModel(e.MapViewModel,e.foursquareService),e.ActivitiesViewModel=new ActivitiesViewModel(e.MapViewModel,e.LocationsViewModel)};window.AppViewModel=e}(),function(){"use strict";function e(e){var t,i,n,a;_.each(e,function(e){var s="#overlay-"+e;t=$("<div>"),i="./build/components/"+e+"/"+e+".html",n="#"+e,t.load(i,n,function(){a=$(this).prop("outerHTML"),$(s).append(a),ko.applyBindings(o,document.getElementById(e))})})}var o=new AppViewModel;e(["searchbar","sidebar"]),$(document).ready(function(){$("#overlay-searchbar").draggable(),$("#overlay-sidebar").draggable()})}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFjdGl2aXRpZXMvYWN0aXZpdHkuY29uc3RydWN0b3IuanMiLCJsb2NhdGlvbnMvbG9jYXRpb24uY29uc3RydWN0b3IuanMiLCJtYXAudmlld21vZGVsLmpzIiwiZm91cnNxdWFyZS5zZXJ2aWNlLmpzIiwibG9jYXRpb25zLnZpZXdtb2RlbC5qcyIsImFjdGl2aXRpZXMudmlld21vZGVsLmpzIiwiYXBwLnZpZXdtb2RlbC5qcyIsImFwcC5pbml0LmpzIl0sIm5hbWVzIjpbIkFjdGl2aXR5IiwiYWN0aXZpdHlRdWVyeSIsInRoaXMiLCJ0aXRsZSIsInJlc3VsdHMiLCJrbyIsIm9ic2VydmFibGVBcnJheSIsInZpc2libGUiLCJvYnNlcnZhYmxlIiwiY2hlY2tlZCIsImhhc0ZpbHRlclJlc3VsdHMiLCJwcm90b3R5cGUiLCJ0b2dnbGVNYXJrZXJzVmlzaWJsZSIsInNlbGYiLCJ0b2dnbGVDaGVja2VkIiwibGVuZ3RoIiwiZmlyc3RMb2NhdGlvbiIsIl8iLCJoZWFkIiwibWFya2VyIiwiZ2V0TWFwIiwibWFwUmVmZXJlbmNlIiwiZWFjaCIsImxvY2F0aW9uIiwic2V0TWFwIiwid2luZG93IiwiTG9jYXRpb24iLCJkYXRhIiwibmFtZSIsInNlbGVjdGVkIiwicGxhY2VfaWQiLCJmb3JtYXR0ZWRfYWRkcmVzcyIsImdlb21ldHJ5IiwidHlwZXMiLCJmb3Vyc3F1YXJlUXVlcnlVcmwiLCJjaGVja2lucyIsImNvbnRhaW5zIiwic3RyIiwiY2FzZVNlbnNpdGl2ZSIsImluY2x1ZGVzIiwidG9Mb3dlckNhc2UiLCJpbmRleE9mIiwic2hvcnRMYXRMbmciLCJNYXRoIiwicm91bmQiLCJsYXQiLCJsbmciLCJnZXRDb2xvciIsIk1hcFZpZXdNb2RlbCIsImZvdXJzcXVhcmVTZXJ2aWNlIiwidm0iLCJtYXAiLCJnZW9jb2RlciIsImluZm9XaW5kb3ciLCJyZWFkeVN0YXRlIiwibG9uZ0JlYWNoQ0EiLCJzZWFyY2hTdHIiLCJjZW50ZXIiLCJnZW9sb2NhdGlvbk5hbWUiLCJjYWNoZWRnZW9sb2NhdGlvbk5hbWUiLCJjdXJyZW50R2VvbG9jYXRpb24iLCJsb2NhdGlvbnNWbSIsInNlbGVjdGVkTG9jYXRpb24iLCJ1cGRhdGVHZW9sb2NhdGlvbiIsInRyaW0iLCJnZW8iLCJpbml0TWFwIiwiZ29vZ2xlIiwibWFwcyIsIk1hcCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJ6b29tIiwibWFwVHlwZUlkIiwiTWFwVHlwZUlkIiwiVEVSUkFJTiIsImNvbnNvbGUiLCJsb2ciLCJHZW9jb2RlciIsImluaXRJbmZvV2luZG93IiwicGxhY2VzU2VydmljZSIsInBsYWNlcyIsIlBsYWNlc1NlcnZpY2UiLCJldmVudCIsImFkZExpc3RlbmVyT25jZSIsImFsZXJ0IiwiZ2VvY29kZSIsImFkZHJlc3MiLCJzdGF0dXMiLCJHZW9jb2RlclN0YXR1cyIsIk9LIiwic2V0Q2VudGVyIiwiSW5mb1dpbmRvdyIsIiQiLCJhamF4IiwiZG9uZSIsInRlbXBsYXRlIiwic2V0Q29udGVudCIsIm9wZW4iLCJrb0JvdW5kIiwiYWRkTGlzdGVuZXIiLCJhcHBseUJpbmRpbmdzIiwicmVzZXRJbmZvV2luZG93IiwiY2VudGVyTWFwQXQiLCJsYXRMbmciLCJMYXRMbmciLCJwYW5UbyIsImFkZE1hcmtlciIsImFjdGl2aXR5IiwiY29sb3IiLCJ2aXNpYmxlU3RhdGUiLCJNYXJrZXIiLCJpY29uIiwicG9zaXRpb24iLCJpZCIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsIkRST1AiLCJtYXJrZXJDb3B5Iiwic2VsZWN0TG9jYXRpb24iLCJzaG93SW5mb1dpbmRvdyIsImJvdW5jZUFuaW1hdGUiLCJzaG93TWFya2Vyc0ZvclZpc2libGVBY3Rpdml0aWVzIiwiYWN0aXZpdGllcyIsInNob3dNYXJrZXIiLCJoaWRlTWFya2VyIiwiZHJvcEFuaW1hdGUiLCJzZXRBbmltYXRpb24iLCJCT1VOQ0UiLCJzZXRUaW1lb3V0IiwiZm91cnNxdWFyZSIsIm1ha2VRdWVyeVVybCIsImJhc2VVcmwiLCJjbGllbnRJZCIsImNsaWVudFNlY3JldCIsInZlcnNpb24iLCJxdWVyeSIsInNwbGl0Iiwiam9pbiIsImxpbWl0IiwiZ2V0Q2hlY2tpbnNDb3VudEZvciIsImNhbGxiYWNrIiwiY29tcHV0ZWQiLCJnZXRKU09OIiwidGhlbiIsInJlcyIsInJlc3BvbnNlIiwidmVudWVzIiwibG9jYXRpb25DaGVja2lucyIsInN0YXRzIiwiY2hlY2tpbnNDb3VudCIsImZhaWwiLCJMb2NhdGlvbnNWaWV3TW9kZWwiLCJtYXBWbSIsImZpbHRlclF1ZXJ5Iiwic2VhcmNoTG9jYXRpb25zIiwiUGxhY2VzU2VydmljZVN0YXR1cyIsImluQm91bmRMb2NhdGlvbnMiLCJzdXBwcmVzc091dE9mQm91bmRzTG9jYXRpb25zIiwibG9jYXRpb25EYXRhIiwibG9jIiwicmVxdWVzdEZvdXJzcXVhcmVEYXRhIiwicHVzaCIsIm5vUmVzdWx0c0Zvckxhc3RHZW9sb2NhdGlvbiIsImxvY2F0aW9ucyIsImxvY0xhdCIsImxvY0xuZyIsIm1hcEJvdW5kcyIsIkgiLCJqIiwiZ2V0Qm91bmRzIiwidGV4dFNlYXJjaCIsImJvdW5kcyIsInN1YnNjcmliZSIsImZpbHRlclJlc3VsdHMiLCJhY3Rpdml0eVZpc2liaWxpdHlEdXJpbmdGaWx0ZXIiLCJzb21lIiwiZmlsdGVySW5wdXRJc0VtcHR5IiwidW5maWx0ZXJSZXN1bHRzIiwicmVzZXRJbml0aWFsVmlzaWJpbGl0eSIsInByZXZlbnREZWZhdWx0IiwiY29weSIsImNsZWFyQ3VycmVudFNlbGVjdGlvbnMiLCJhc3NpZ25Db2xvcnNUb0xvY2F0aW9ucyIsImdldFJlZmVyZW5jZVRvQWN0aXZpdGllc09iamVjdCIsInBhc3NTZWxmVG9NYXBWbSIsInBhc3NTZWxlY3RlZExvY2F0aW9uVG9NYXBWbSIsIkFjdGl2aXRpZXNWaWV3TW9kZWwiLCJkZWZhdWx0QWN0aXZpdGllcyIsImRpc3BsYXlEZWZhdWx0QWN0aXZpdGllcyIsInBhc3NSZWZlcmVuY2VUb0xvY2F0aW9uc1ZtIiwiYWN0aXZpdHlOYW1lIiwiYWRkQWN0aXZpdHkiLCJyZXNldEluZm9XaW5kb3dXaGVuU2VsZWN0ZWRMb2NhdGlvblRvZ2dsZWRWaXNpYmxlIiwiQXBwVmlld01vZGVsIiwiZGlzcGxheUNvbXBvbmVudHMiLCJjb21wb25lbnRzIiwiJGNvbXBvbmVudCIsInRlbXBsYXRlVXJsIiwiaHRtbCIsImNvbXBvbmVudCIsImNvbnRhaW5lciIsImxvYWQiLCJwcm9wIiwiYXBwZW5kIiwiYXBwIiwicmVhZHkiLCJkcmFnZ2FibGUiXSwibWFwcGluZ3MiOiJDQUNBLFdBRUEsWUFFQSxJQUFBQSxHQUFBLFNBQUFDLEdBRUFDLEtBQUFDLE1BQUFGLEVBQ0FDLEtBQUFFLFFBQUFDLEdBQUFDLGtCQUNBSixLQUFBSyxRQUFBRixHQUFBRyxZQUFBLEdBR0FOLEtBQUFPLFFBQUFKLEdBQUFHLFlBQUEsR0FHQU4sS0FBQVEsaUJBQUFMLEdBQUFHLGFBR0FSLEdBQUFXLFVBQUFDLHFCQUFBLFdBRUEsR0FBQUMsR0FBQVgsSUFHQSxJQUZBVyxFQUFBQyxnQkFFQUQsRUFBQVQsVUFBQVcsT0FBQSxFQUFBLENBRUEsR0FBQUMsR0FBQUMsRUFBQUMsS0FBQUwsRUFBQVQsVUFDQSxRQUFBWSxJQUFBRyxPQUFBQyxXQUNBUCxFQUFBUSxhQUFBTCxJQUFBRyxPQUFBQyxVQUdBSCxFQUFBSyxLQUFBVCxFQUFBVCxVQUFBLFNBQUFtQixHQUNBLE9BQUFBLElBQUFKLE9BQUFDLFNBQ0FHLElBQUFKLE9BQUFLLE9BQUFYLEVBQUFRLGNBR0FFLElBQUFKLE9BQUFLLE9BQUEsUUFJQSxPQUFBLEdBR0F4QixFQUFBVyxVQUFBRyxjQUFBLFdBQ0EsR0FBQUQsR0FBQVgsSUFFQSxPQURBVyxHQUFBSixTQUFBSSxFQUFBSixZQUNBLEdBS0FnQixPQUFBekIsU0FBQUEsS0NqREEsV0FFQSxZQUVBLElBQUEwQixHQUFBLFNBQUFDLEdBRUF6QixLQUFBMEIsS0FBQXZCLEdBQUFHLFdBQUFtQixFQUFBQyxNQUNBMUIsS0FBQUssUUFBQUYsR0FBQUcsWUFBQSxHQUNBTixLQUFBMkIsU0FBQXhCLEdB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QUFBSyxLQUFBSixFQUFBcEYsRUFBQSxXQUNBcUYsRUFBQTFHLEVBQUEzRixNQUFBeU0sS0FBQSxhQUNBOUcsRUFBQTRHLEdBQUFHLE9BQUFMLEdBRUFsTSxHQUFBZ0csY0FBQXdHLEVBQUF2SSxTQUFBQyxlQUFBaUksUUExQkEsR0FBQUssR0FBQSxHQUFBWCxhQU1BQyxJQUFBLFlBQUEsWUE2QkF0RyxFQUFBdkIsVUFBQXdJLE1BQ0EsV0FFQWpILEVBQUEsc0JBQUFrSCxZQUNBbEgsRUFBQSxvQkFBQWtIIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxyXG4oZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgQWN0aXZpdHkgPSBmdW5jdGlvbiBBY3Rpdml0eShhY3Rpdml0eVF1ZXJ5KSB7XHJcblxyXG4gICAgICAgIHRoaXMudGl0bGUgPSBhY3Rpdml0eVF1ZXJ5O1xyXG4gICAgICAgIHRoaXMucmVzdWx0cyA9IGtvLm9ic2VydmFibGVBcnJheSgpO1xyXG4gICAgICAgIHRoaXMudmlzaWJsZSA9IGtvLm9ic2VydmFibGUodHJ1ZSk7XHJcblxyXG4gICAgICAgIC8vIFdlIHVzZSBgY2hlY2tlZGAgdG8gZGV0ZXJtaW5lIGlmIGFuIGFjdGl2aXR5IHdhcyBpbml0aWFsbHkgdmlzaWJsZSB3aGVuIHByaW9yIHRvIGFwcGx5aW5nIHRoZSBmaWx0ZXIgcXVlcnkuXHJcbiAgICAgICAgdGhpcy5jaGVja2VkID0ga28ub2JzZXJ2YWJsZSh0cnVlKTtcclxuXHJcbiAgICAgICAgLy8gV2UgdXNlIGBoYXNGaWx0ZXJSZXN1bHRzYCB0byBkZXRlcm1pbmUgaWYgdGhlIGFjdGl2aXR5IGNoZWNrYm94IHNob3VsZCBiZSBkaXNhYmxlZC5cclxuICAgICAgICB0aGlzLmhhc0ZpbHRlclJlc3VsdHMgPSBrby5vYnNlcnZhYmxlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIEFjdGl2aXR5LnByb3RvdHlwZS50b2dnbGVNYXJrZXJzVmlzaWJsZSA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHNlbGYudG9nZ2xlQ2hlY2tlZCgpO1xyXG5cclxuICAgICAgICBpZiAoc2VsZi5yZXN1bHRzKCkubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIGZpcnN0TG9jYXRpb24gPSBfLmhlYWQoc2VsZi5yZXN1bHRzKCkpO1xyXG4gICAgICAgICAgICBpZiAoIGZpcnN0TG9jYXRpb24oKS5tYXJrZXIuZ2V0TWFwKCkgIT09IG51bGwpIHtcclxuICAgICAgICAgICAgICAgIHNlbGYubWFwUmVmZXJlbmNlID0gZmlyc3RMb2NhdGlvbigpLm1hcmtlci5nZXRNYXAoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgXy5lYWNoKHNlbGYucmVzdWx0cygpLCBmdW5jdGlvbiAobG9jYXRpb24pIHtcclxuICAgICAgICAgICAgICAgIGlmIChsb2NhdGlvbigpLm1hcmtlci5nZXRNYXAoKSA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uKCkubWFya2VyLnNldE1hcChzZWxmLm1hcFJlZmVyZW5jZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbigpLm1hcmtlci5zZXRNYXAobnVsbCk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH1cclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH07XHJcblxyXG4gICAgQWN0aXZpdHkucHJvdG90eXBlLnRvZ2dsZUNoZWNrZWQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xyXG4gICAgICAgIHNlbGYuY2hlY2tlZCggIShzZWxmLmNoZWNrZWQoKSkpO1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxuXHJcblxyXG5cclxuICAgIHdpbmRvdy5BY3Rpdml0eSA9IEFjdGl2aXR5O1xyXG5cclxufSkoKTtcclxuXHJcblxyXG4iLCJcclxuKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIExvY2F0aW9uID0gZnVuY3Rpb24gTG9jYXRpb24oZGF0YSkge1xyXG5cclxuICAgICAgICB0aGlzLm5hbWUgPSBrby5vYnNlcnZhYmxlKGRhdGEubmFtZSk7XHJcbiAgICAgICAgdGhpcy52aXNpYmxlID0ga28ub2JzZXJ2YWJsZSh0cnVlKTtcclxuICAgICAgICB0aGlzLnNlbGVjdGVkID0ga28ub2JzZXJ2YWJsZShmYWxzZSk7XHJcbiAgICAgICAgdGhpcy5wbGFjZV9pZCA9IGtvLm9ic2VydmFibGUoZGF0YS5wbGFjZV9pZCk7XHJcbiAgICAgICAgdGhpcy5mb3JtYXR0ZWRfYWRkcmVzcyA9IGtvLm9ic2VydmFibGUoZGF0YS5mb3JtYXR0ZWRfYWRkcmVzcyk7XHJcbiAgICAgICAgdGhpcy5nZW9tZXRyeSA9IGtvLm9ic2VydmFibGUoZGF0YS5nZW9tZXRyeSk7XHJcbiAgICAgICAgdGhpcy50eXBlcyA9IGtvLm9ic2VydmFibGVBcnJheShkYXRhLnR5cGVzKTtcclxuICAgICAgICB0aGlzLm1hcmtlciA9IG51bGw7XHJcblxyXG4gICAgICAgIHRoaXMuZm91cnNxdWFyZVF1ZXJ5VXJsID0ga28ub2JzZXJ2YWJsZSgnJyk7XHJcblxyXG4gICAgICAgIHRoaXMuY2hlY2tpbnMgPSBrby5vYnNlcnZhYmxlKCk7XHJcbiAgICB9O1xyXG5cclxuLy8gVE9ETzogQWxzbyBzZWFyY2ggZm9yIGBzdHJgIHdpdGhpbiBgTG9jYXRpb24udHlwZXNgLlxyXG4gICAgTG9jYXRpb24ucHJvdG90eXBlLmNvbnRhaW5zID0gZnVuY3Rpb24gKHN0ciwgY2FzZVNlbnNpdGl2ZSkge1xyXG4gICAgICAgIGlmIChjYXNlU2Vuc2l0aXZlID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5hbWUoKS5pbmNsdWRlcyhzdHIpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm5hbWUoKS50b0xvd2VyQ2FzZSgpLmluZGV4T2Yoc3RyLnRvTG93ZXJDYXNlKCkpID4gLTE7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICBMb2NhdGlvbi5wcm90b3R5cGUuc2hvcnRMYXRMbmcgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgcmV0dXJuIChNYXRoLnJvdW5kKHRoaXMuZ2VvbWV0cnkoKS5sb2NhdGlvbi5sYXQoKSAqIDEwMDApIC8gMTAwMCkgKyAnLCcgK1xyXG4gICAgICAgICAgICAgICAgKE1hdGgucm91bmQodGhpcy5nZW9tZXRyeSgpLmxvY2F0aW9uLmxuZygpICogMTAwMCkgLyAxMDAwKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gSSBrbm93IHRoaXMgc3dpdGNoIGlzIHRlcnJpYmxlLCBidXQgSSB1c2VkIGluIHBsYWNlIG9mIGEgZm9ybXVsYSBiZWNhdXNlIEkgd2FudGVkIHRvIGJlIGFibGUgdG8gZWFzaWx5IHR3ZWFrIHRoZVxyXG4gICAgLy8gdGhyZXNob2xkcyAodGhlc2UgYXJlIGFyYml0cmFyeSkgd2hlcmUgZGlmZmVyZW50IG1hcmtlciBjb2xvcnMgYXJlIHVzZWQuXHJcbiAgICBMb2NhdGlvbi5wcm90b3R5cGUuZ2V0Q29sb3IgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIGNoZWNraW5zID0gdGhpcy5jaGVja2lucygpO1xyXG4gICAgICAgIHN3aXRjaCAodHJ1ZSkge1xyXG4gICAgICAgICAgICBjYXNlIChjaGVja2lucyA+IDEwMDApOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICcxJztcclxuICAgICAgICAgICAgY2FzZSAoY2hlY2tpbnMgPiA2MDApOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICcyJztcclxuICAgICAgICAgICAgY2FzZSAoY2hlY2tpbnMgPiAzNTApOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICczJztcclxuICAgICAgICAgICAgY2FzZSAoY2hlY2tpbnMgPiAxMjApOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICc0JztcclxuICAgICAgICAgICAgY2FzZSAoY2hlY2tpbnMgPiA2MCk6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJzUnO1xyXG4gICAgICAgICAgICBjYXNlIChjaGVja2lucyA+IDMwKTpcclxuICAgICAgICAgICAgICAgIHJldHVybiAnNic7XHJcbiAgICAgICAgICAgIGNhc2UgKGNoZWNraW5zID4gMTYpOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICc3JztcclxuICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgIHJldHVybiAnNyc7XHJcbiAgICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB3aW5kb3cuTG9jYXRpb24gPSBMb2NhdGlvbjtcclxuXHJcbn0pKCk7XHJcbiIsIlxyXG4oZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgTWFwVmlld01vZGVsID0gZnVuY3Rpb24oZm91cnNxdWFyZVNlcnZpY2UpIHtcclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogVG9wLWxldmVsIHZhcmlhYmxlcyBhbmQgcHJvcGVydGllcyBmb3IgYE1hcFZpZXdNb2RlbCgpYFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcblxyXG4gICAgICAgIC8vIEluaXRpYWxpemUgYG1hcGAsIGBpbmZvV2luZG93YCwgYW5kIGBnZW9jb2RlcmAgdmFyaWFibGVzIHdoaWNoIGFyZSBuZWVkZWQgaW4gb3VyIGBpbml0TWFwKClgIGNhbGxiYWNrIGZ1bmN0aW9uLlxyXG4gICAgICAgIHdpbmRvdy5tYXAgPSBudWxsO1xyXG4gICAgICAgIHZhciBnZW9jb2RlcjtcclxuXHJcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBlbXB0eSBwcm9wZXJ0eSB0byBob2xkIHRoZSBtYXJrZXIgaW5mbyB3aW5kb3cuXHJcbiAgICAgICAgdm0uaW5mb1dpbmRvdyA9IGtvLm9ic2VydmFibGUoKTtcclxuXHJcbiAgICAgICAgLy8gYHJlYWR5U3RhdGVgIGlzIHNldCB0byBgdHJ1ZWAgaW5zaWRlIHRoZSBgaW5pdE1hcCgpYCBmdW5jdGlvbiBvbmx5IHdoZW4gdGhlIG1hcCBpcyBpbiBgaWRsZWAgc3RhdGUgKGluZGljYXRpbmdcclxuICAgICAgICAvLyB0aGF0IGl0IGhhcyBzdWNjZXNzZnVsbHkgbG9hZGVkKSwgYW5kIGFsc28gb25jZSBHb29nbGUgUGxhY2VzIFNlcnZpY2UgaXMgaW5pdGlhbGl6ZWQuIGBBY3Rpdml0aWVzVmlld01vZGVsYFxyXG4gICAgICAgIC8vIGxpc3RlbnMgZm9yIGEgY2hhbmdlIHRvIGByZWFkeVN0YXRlYCBpbiBvcmRlciB0byBleGVjdXRlIHRoZSBkZWZhdWx0IGFjdGl2aXRpZXMgR29vZ2xlIFBsYWNlcyBxdWVyeSAob3RoZXJ3aXNlXHJcbiAgICAgICAgLy8gdGhlIHNlYXJjaCBleGVjdXRlcyBiZWZvcmUgdGhlIG1hcCBhbmQgUGxhY2VzIFNlcnZpY2UgYXJlIGZ1bGx5IGluaXRpYWxpemVkICYgd2UnbGwgc2VlIGVycm9ycykuXHJcbiAgICAgICAgdm0ucmVhZHlTdGF0ZSA9IGtvLm9ic2VydmFibGUoZmFsc2UpO1xyXG5cclxuICAgICAgICAvLyBEZWZhdWx0IGxvY2F0aW9uXHJcbiAgICAgICAgdmFyIGxvbmdCZWFjaENBID0ge1xyXG4gICAgICAgICAgICBzZWFyY2hTdHI6ICdMb25nIEJlYWNoLCBDQScsXHJcbiAgICAgICAgICAgIGNlbnRlcjoge2xhdDogMzMuNzcwLCBsbmc6IC0xMTguMTk0fVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIEluaXRpYWxpemUgYGdlb2xvY2F0aW9uTmFtZWAgb2JzZXJ2YWJsZSB3aXRoIGEgZGVmYXVsdCBsb2NhdGlvbiB0ZXh0IHRvIGFwcGVhciBpbiB0aGUgbG9jYXRpb24gc2VhcmNoIGlucHV0LlxyXG4gICAgICAgIHZtLmdlb2xvY2F0aW9uTmFtZSA9IGtvLm9ic2VydmFibGUobG9uZ0JlYWNoQ0Euc2VhcmNoU3RyKTtcclxuICAgICAgICB2bS5jYWNoZWRnZW9sb2NhdGlvbk5hbWUgPSBrby5vYnNlcnZhYmxlKGxvbmdCZWFjaENBLnNlYXJjaFN0cik7XHJcblxyXG4gICAgICAgIC8vIEluaXRpYWxpemUgYW4gZW1wdHkga28ub2JzZXJ2YWJsZSBvYmplY3QgdG8gc3RvcmUgdGhlIGN1cnJlbnQgbG9jYXRpb24uXHJcbiAgICAgICAgdm0uY3VycmVudEdlb2xvY2F0aW9uID0ga28ub2JzZXJ2YWJsZSgpO1xyXG5cclxuICAgICAgICAvLyBXZSB3aWxsIHVzZSBgbG9jYXRpb25zVm1gIGFzIGEgcmVmZXJlbmNlIHRvIGBMb2NhdGlvbnNWaWV3TW9kZWwoKWAuIFRoZXNlIHByb3BlcnRpZXMgYXJlIHVzZWQgZm9yIGRhdGFcclxuICAgICAgICAvLyBiaW5kaW5nIGluc2lkZSBvZiBsb2NhdGlvbiBpbmZvIHdpbmRvd3MuXHJcbiAgICAgICAgdm0ubG9jYXRpb25zVm0gPSB7fTtcclxuICAgICAgICB2bS5zZWxlY3RlZExvY2F0aW9uID0ga28ub2JzZXJ2YWJsZSgpO1xyXG5cclxuXHJcbiAgICAgICAgLyoqKlxyXG4gICAgICAgICAqIEdvb2dsZSBNYXBzIEFQSSBjYWxsc1xyXG4gICAgICAgICAqL1xyXG5cclxuICAgICAgICAvLyBgdXBkYXRlR2VvbG9jYXRpb24oKWAgaXMgdGhlIHN1Ym1pdCBmdW5jdGlvbiBjYWxsZWQgZnJvbSB0aGUgbG9jYXRpb24gZm9ybSBpbiAnc2VhcmNoYmFyLmh0bWwuJ1xyXG4gICAgICAgIHZtLnVwZGF0ZUdlb2xvY2F0aW9uID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAodm0uZ2VvbG9jYXRpb25OYW1lKCkudHJpbSgpICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgdm0uZ2VvKHZtLmdlb2xvY2F0aW9uTmFtZSgpKTtcclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIHZtLmdlb2xvY2F0aW9uTmFtZSh2bS5jYWNoZWRnZW9sb2NhdGlvbk5hbWUoKSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBJbml0aWFsaXplIG91ciBtYXAuIFRoaXMgaXMgdGhlIGNhbGxiYWNrIGZ1bmN0aW9uIHBhcmFtZXRlciBpbiBvdXIgR29vZ2xlIE1hcHMgQVBJIHJlcXVlc3QgaW4gJ2luZGV4Lmh0bWwnLlxyXG4gICAgICAgIHdpbmRvdy5pbml0TWFwID0gZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHRoZSBgbWFwYC5cclxuICAgICAgICAgICAgd2luZG93Lm1hcCA9IG5ldyBnb29nbGUubWFwcy5NYXAoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcCcpLCB7XHJcbiAgICAgICAgICAgICAgICB6b29tOiAxNSxcclxuICAgICAgICAgICAgICAgIG1hcFR5cGVJZDogZ29vZ2xlLm1hcHMuTWFwVHlwZUlkLlRFUlJBSU5cclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICBjb25zb2xlLmxvZygnR29vZ2xlIE1hcHMgQVBJIGhhcyBiZWVuIGNhbGxlZC4nKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemUgdGhlIGBnZW9jb2RlcmAuXHJcbiAgICAgICAgICAgIGdlb2NvZGVyID0gbmV3IGdvb2dsZS5tYXBzLkdlb2NvZGVyKCk7XHJcbiAgICAgICAgICAgIHZtLmdlbyh2bS5nZW9sb2NhdGlvbk5hbWUoKSk7XHJcblxyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIHRoZSBtYXJrZXIgaW5mbyB3aW5kb3dzLlxyXG4gICAgICAgICAgICB2bS5pbml0SW5mb1dpbmRvdygpO1xyXG5cclxuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSBQbGFjZXMgU2VydmljZS5cclxuICAgICAgICAgICAgdm0ucGxhY2VzU2VydmljZSA9IG5ldyBnb29nbGUubWFwcy5wbGFjZXMuUGxhY2VzU2VydmljZShtYXApO1xyXG5cclxuICAgICAgICAgICAgaWYgKHZtLnBsYWNlc1NlcnZpY2UpIHtcclxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdHb29nbGUgUGxhY2VzIHNlcnZpY2UgaGFzIGJlZW4gaW5pdGlhbGl6ZWQuJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gU2V0IGByZWFkeVN0YXRlYCBwcm9wZXJ0eSB0byBgdHJ1ZWAgb25jZSBQbGFjZXMgU2VydmljZSBpcyBhdmFpbGFibGUgYW5kIHRoZSBtYXAgaGFzIGxvYWRlZCBzdWNjZXNzZnVsbHkuXHJcbiAgICAgICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lck9uY2UobWFwLCAnaWRsZScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAobWFwLmNlbnRlcikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5yZWFkeVN0YXRlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnR29vZ2xlIE1hcHMgaGFzIGxvYWRlZCBzdWNjZXNzZnVsbHkuJyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdUaGVyZSB3YXMgYSBwcm9ibGVtIGxvYWRpbmcgdGhlIG1hcC4nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICBhbGVydCgnVGhlcmUgd2FzIGFuIGVycm9yIGluaXRpYWxpemluZyBHb29nbGUgUGxhY2VzIHNlcnZpY2UuJyk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgdm0uZ2VvID0gZnVuY3Rpb24gKGdlb2xvY2F0aW9uTmFtZSkge1xyXG4gICAgICAgICAgICBnZW9jb2Rlci5nZW9jb2RlKCB7ICdhZGRyZXNzJzogZ2VvbG9jYXRpb25OYW1lIH0sIGZ1bmN0aW9uIChyZXN1bHRzLCBzdGF0dXMpIHtcclxuICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT0gZ29vZ2xlLm1hcHMuR2VvY29kZXJTdGF0dXMuT0spIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdm0uY2FjaGVkZ2VvbG9jYXRpb25OYW1lKGdlb2xvY2F0aW9uTmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIG1hcC5zZXRDZW50ZXIocmVzdWx0c1swXS5nZW9tZXRyeS5sb2NhdGlvbik7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFN0b3JlIHRoZSBzdWNjZXNzZnVsbHkgZ2VvY29kZWQgY29vcmRpbmF0ZXMuIExvY2F0aW9uc1ZpZXdNb2RlbCBzdWJzY3JpYmVzIHRvIHRoaXMgcHJvcGVydHkgaW5cclxuICAgICAgICAgICAgICAgICAgICAvLyBvcmRlciB0byBzZWFyY2ggZm9yIG5ldyBhY3Rpdml0eSBsb2NhdGlvbnMgd2hlbmV2ZXIgdGhlIG1hcCBnZW9sb2NhdGlvbiBjaGFuZ2VzLlxyXG4gICAgICAgICAgICAgICAgICAgIHZtLmN1cnJlbnRHZW9sb2NhdGlvbih7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNlbnRlcjoge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbGF0OiByZXN1bHRzWzBdLmdlb21ldHJ5LmxvY2F0aW9uLmxhdCgpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbG5nOiByZXN1bHRzWzBdLmdlb21ldHJ5LmxvY2F0aW9uLmxuZygpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gUmVsb2FkIG1hcmtlciBpbmZvIHdpbmRvd3Mgd2hlbmV2ZXIgdGhlIGdlb2xvY2F0aW9uIGNoYW5nZXMuXHJcbiAgICAgICAgICAgICAgICAgICAgdm0uaW5pdEluZm9XaW5kb3coKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0xvY2F0aW9uIGhhcyBiZWVuIHNldCB0bzogJyArIGdlb2xvY2F0aW9uTmFtZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICB2bS5nZW9sb2NhdGlvbk5hbWUodm0uY2FjaGVkZ2VvbG9jYXRpb25OYW1lKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIGFsZXJ0KFwiR2VvY29kaW5nIHdhcyB1bnN1Y2Nlc3NmdWwgZm9yIHRoZSBmb2xsb3dpbmcgcmVhc29uOiBcIiArIHN0YXR1cyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICB2bS5pbml0SW5mb1dpbmRvdyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemUgaW5mb1dpbmRvdywgbG9hZCB0aGUgdGVtcGxhdGUgYW5kIGFwcGx5IGJpbmRpbmdzLlxyXG4gICAgICAgICAgICB2bS5pbmZvV2luZG93KG5ldyBnb29nbGUubWFwcy5JbmZvV2luZG93KCkpO1xyXG5cclxuICAgICAgICAgICAgJC5hamF4KCcuL2J1aWxkL2NvbXBvbmVudHMvaW5mb3dpbmRvdy9pbmZvd2luZG93Lmh0bWwnKVxyXG4gICAgICAgICAgICAgICAgLmRvbmUoZnVuY3Rpb24gKHRlbXBsYXRlKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZtLmluZm9XaW5kb3coKS5zZXRDb250ZW50KHRlbXBsYXRlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gT3BlbmluZyB0aGUgaW5mbyB3aW5kb3cgd2l0aCB0aGUgYG1hcGAgcGFyYW0gc2V0IHRvIGBudWxsYCBzdGlsbCBhbGxvd3MgdXMgdG8gcGVyZm9ybSBrbm9ja291dFxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGRhdGEgYmluZGluZyAoaWYgd2UgaGFkIHNldCB0byBgbWFwYCB3ZSB3b3VsZCBzZWUgYW4gZW1wdHkgaW5mbyB3aW5kb3cgaW4gdGhlIHVwcGVyLWxlZnQgd2hlbiB0aGVcclxuICAgICAgICAgICAgICAgICAgICAvLyBhcHAgc3RhcnRzKS5cclxuICAgICAgICAgICAgICAgICAgICB2bS5pbmZvV2luZG93KCkub3BlbihudWxsKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdmFyIGtvQm91bmQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICBnb29nbGUubWFwcy5ldmVudC5hZGRMaXN0ZW5lcih2bS5pbmZvV2luZG93KCksICdkb21yZWFkeScsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGtvQm91bmQgPT09IGZhbHNlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrby5hcHBseUJpbmRpbmdzKHZtLCBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnaW5mb3dpbmRvdy1vdmVybGF5JykpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAga29Cb3VuZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gV2hlbiB0aGUgaW5mbyB3aW5kb3cgaXMgY2xpY2tlZCBjbG9zZWQsIHdlIGxvc2UgaXRzIGtub2Nrb3V0IGJpbmRpbmcuIFdoZW4gdGhpcyBoYXBwZW5zLCBpbnZva2VcclxuICAgICAgICAgICAgICAgICAgICAvLyBgaW5pdEluZm9XaW5kb3coKWAgYWdhaW4gdG8gbWFrZSBpdCB3b3JrIHVwb24gcmVvcGVuaW5nLlxyXG4gICAgICAgICAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKHZtLmluZm9XaW5kb3coKSwgJ2Nsb3NlY2xpY2snLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGtvQm91bmQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uaW5pdEluZm9XaW5kb3coKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIEl0IHdvdWxkIGJlIG5pY2UgaWYgdGhlcmUgd2FzIGFuIGBvbmNsb3NlYCBldmVudCBmb3IgaW5mbyB3aW5kb3dzLiBTaW5jZSB3ZSBzb21ldGltZXMgbmVlZCB0byBjbG9zZSB0aGVcclxuICAgICAgICAvLyBpbmZvIHdpbmRvdyBwcm9ncmFtbWF0aWNhbGx5LCBhcyBpcyB0aGUgY2FzZSB3aGVuIHRoZSBzZWxlY3RlZCBsb2NhdGlvbiBpcyBoaWRkZW4gdmlhIHRoZSBmaWx0ZXIsIG9yIHdoZW5cclxuICAgICAgICAvLyB0aGUgYWN0aXZpdHkgY29udGFpbmluZyB0aGUgc2VsZWN0ZWQgbG9jYXRpb24gaXMgdW5jaGVja2VkLCB3ZSBuZWVkIHRvIHJlc2V0IHRoZSBpbmZvIHdpbmRvdyBmb3Iga25vY2tvdXRcclxuICAgICAgICAvLyBiaW5kaW5ncyB0byB3b3JrIHByb3Blcmx5LlxyXG4gICAgICAgIHZtLnJlc2V0SW5mb1dpbmRvdyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdm0uaW5mb1dpbmRvdygpLm9wZW4obnVsbCk7IC8vIGhhY2suIGluZm9XaW5kb3cuY2xvc2UoKSB3YXMgbm90IHdvcmtpbmcgZm9yIG1lIGhlcmUuXHJcbiAgICAgICAgICAgIHZtLmluaXRJbmZvV2luZG93KCk7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICBNYXAgb3JpZW50YXRpb24gbWV0aG9kc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLmNlbnRlck1hcEF0ID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XHJcbiAgICAgICAgICAgIHZhciBsYXRMbmcgPSBuZXcgZ29vZ2xlLm1hcHMuTGF0TG5nKGxvY2F0aW9uLmdlb21ldHJ5KCkubG9jYXRpb24ubGF0KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uLmdlb21ldHJ5KCkubG9jYXRpb24ubG5nKCkpO1xyXG4gICAgICAgICAgICBtYXAucGFuVG8obGF0TG5nKTtcclxuICAgICAgICB9O1xyXG5cclxuXHJcblxyXG4gICAgICAgIC8vIFRPRE86IGluZm8gd2luZG93IGtvIGJpbmRpbmcgaXMgbG9zdCBpZiBpbmZvIHdpbmRvdyBpcyBjbG9zZWQuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogIE1hcCBtYXJrZXIgbWV0aG9kc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIC8vIENoYW5naW5nIGNvbG9yIG9mIHRoZSBtYXJrZXJzIGJhc2VkIG9uIGZvdXJzcXVhcmUgY2hlY2tpbnMgd2FzIGEgYml0IG9mIGFuIGFmdGVydGhvdWdodC4gUmF0aGVyIHRoYW5cclxuICAgICAgICAvLyBvdmVyaGF1bCBteSBjb2RlLCBJIG9wdGVkIHRvIGdldCBhIGxpdHRsZSBtZXNzeSB3aXRoIHBhc3NpbmcgdG9vIG1hbnkgcGFyYW1ldGVycyAmIGNhbGxiYWNrIGZ1bmN0aW9uIGluXHJcbiAgICAgICAgLy8gb3JkZXIgdG8gbWFrZSB0aGlzIHdvcmsuIFNvcnJ5IGl0J3MgYSBoYWNreSEhXHJcbiAgICAgICAgdm0uYWRkTWFya2VyID0gZnVuY3Rpb24gKGxvY2F0aW9uLCBhY3Rpdml0eSwgY29sb3IpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciB2aXNpYmxlU3RhdGUgPSBhY3Rpdml0eSgpLnZpc2libGUoKSA/IG1hcCA6IG51bGw7XHJcblxyXG4gICAgICAgICAgICB2YXIgbWFya2VyID0gbmV3IGdvb2dsZS5tYXBzLk1hcmtlcih7XHJcbiAgICAgICAgICAgICAgICBtYXA6IHZpc2libGVTdGF0ZSxcclxuICAgICAgICAgICAgICAgIHRpdGxlOiBsb2NhdGlvbigpLm5hbWUoKSxcclxuICAgICAgICAgICAgICAgIGljb246ICdidWlsZC9pbWFnZXMvbWFya2Vycy9tYXJrZXJfJyArIGNvbG9yICsgJy5wbmcnLFxyXG4gICAgICAgICAgICAgICAgcG9zaXRpb246IGxvY2F0aW9uKCkuZ2VvbWV0cnkoKS5sb2NhdGlvbixcclxuICAgICAgICAgICAgICAgIGlkOiBsb2NhdGlvbigpLnBsYWNlX2lkKCksXHJcbiAgICAgICAgICAgICAgICBhbmltYXRpb246IGdvb2dsZS5tYXBzLkFuaW1hdGlvbi5EUk9QfSk7XHJcblxyXG4gICAgICAgICAgICAoZnVuY3Rpb24gKG1hcmtlckNvcHkpIHtcclxuICAgICAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKG1hcmtlckNvcHksICdjbGljaycsIGZ1bmN0aW9uKCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2bS5sb2NhdGlvbnNWbS5zZWxlY3RMb2NhdGlvbihsb2NhdGlvbigpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdm0uc2hvd0luZm9XaW5kb3cobG9jYXRpb24oKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgdm0uYm91bmNlQW5pbWF0ZSh0aGlzKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KShtYXJrZXIpO1xyXG5cclxuICAgICAgICAgICAgcmV0dXJuIG1hcmtlcjtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5zaG93SW5mb1dpbmRvdyA9IGZ1bmN0aW9uIChsb2NhdGlvbikge1xyXG4gICAgICAgICAgICB2bS5pbmZvV2luZG93KCkub3BlbihtYXAsIGxvY2F0aW9uLm1hcmtlcik7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uc2hvd01hcmtlcnNGb3JWaXNpYmxlQWN0aXZpdGllcyA9IGZ1bmN0aW9uIChhY3Rpdml0aWVzKSB7XHJcbiAgICAgICAgICAgIF8uZWFjaChhY3Rpdml0aWVzKCksIGZ1bmN0aW9uKGFjdGl2aXR5KSB7XHJcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZpdHkoKS52aXNpYmxlKCkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBfLmVhY2goYWN0aXZpdHkoKS5yZXN1bHRzKCksIGZ1bmN0aW9uKGxvY2F0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLnNob3dNYXJrZXIobG9jYXRpb24pO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5oaWRlTWFya2VyID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XHJcbiAgICAgICAgICAgIGxvY2F0aW9uKCkubWFya2VyLnNldE1hcChudWxsKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICAvLyBUT0RPOiBpbmZvIHdpbmRvd3Mgbm90IHdvcmtpbmcgYWZ0ZXIgZmlsdGVyIHBlcmZvcm1lZC4gSSB0aGluayB0aGlzIG1heSBoYXBwZW4gd2hlbiBpbmZvIHdpbmRvdyBpcyBvcGVuICYgZ2V0cyBoaWRkZW4gZHVyaW5nIGZpbHRlci5cclxuICAgICAgICB2bS5zaG93TWFya2VyID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XHJcbiAgICAgICAgICAgIC8vIE9ubHkgZGlzcGxheSB0aGUgbWFya2VyIGlmIGl0IGlzIG5vdCBhbHJlYWR5IHZpc2libGUuXHJcbiAgICAgICAgICAgIGlmIChsb2NhdGlvbigpLm1hcmtlci5nZXRNYXAoKSAhPSBtYXApIHtcclxuICAgICAgICAgICAgICAgIHZtLmRyb3BBbmltYXRlKGxvY2F0aW9uKCkubWFya2VyKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmRyb3BBbmltYXRlID0gZnVuY3Rpb24gKG1hcmtlcikge1xyXG4gICAgICAgICAgICBtYXJrZXIuc2V0TWFwKG1hcCk7XHJcbiAgICAgICAgICAgIG1hcmtlci5zZXRBbmltYXRpb24oZ29vZ2xlLm1hcHMuQW5pbWF0aW9uLkRST1ApO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmJvdW5jZUFuaW1hdGUgPSBmdW5jdGlvbiAobWFya2VyKSB7XHJcbiAgICAgICAgICAgIG1hcmtlci5zZXRBbmltYXRpb24oZ29vZ2xlLm1hcHMuQW5pbWF0aW9uLkJPVU5DRSk7XHJcblxyXG4gICAgICAgICAgICAvLyBUdXJuIG9mZiBhbmltYXRpb24gYWZ0ZXIgc2hvcnQgdGltZS5cclxuICAgICAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBtYXJrZXIuc2V0QW5pbWF0aW9uKG51bGwpO1xyXG4gICAgICAgICAgICB9LCAyMTI1KTtcclxuICAgICAgICB9O1xyXG4gICAgfTtcclxuXHJcbiAgICB3aW5kb3cuTWFwVmlld01vZGVsID0gTWFwVmlld01vZGVsO1xyXG5cclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIGZvdXJzcXVhcmVTZXJ2aWNlID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICB2YXIgZm91cnNxdWFyZSA9IHRoaXM7XHJcblxyXG4gICAgICAgIGZvdXJzcXVhcmUubWFrZVF1ZXJ5VXJsID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBwZXIgQVBJIGRvY3MsICcvc2VhcmNoJyBpcyBwcm9iYWJseSBiZXR0ZXIgZm9yIGZpbmRpbmcgc3BlY2lmaWMgbG9jYXRpb24sIHdoZXJlYXMgJy9leHBsb3JlJyBtaWdodCBiZSB1c2VkIHRvXHJcbiAgICAgICAgICAgIC8vIGZpbmQgbW9zdCBwb3B1bGFyIGxvY2F0aW9ucyBvZiBhIGNhdGVnb3J5IGluIGEgZ2l2ZW4gYXJlYS5cclxuICAgICAgICAgICAgdmFyIGJhc2VVcmwgPSAnaHR0cHM6Ly9hcGkuZm91cnNxdWFyZS5jb20vdjIvdmVudWVzL3NlYXJjaCcsXHJcblxyXG4gICAgICAgICAgICAvLyBUT0RPOiByZW1vdmUgY2xpZW50SWQuXHJcbiAgICAgICAgICAgICAgICBjbGllbnRJZCA9ICc/Y2xpZW50X2lkPVBVWEJKQ1A0QjRIQjJLSURJR1FQSFhFQkFLV1pQWk80SE9XSlpBSlQ0NU1PWVdETycsXHJcblxyXG4gICAgICAgICAgICAvLyBUT0RPOiByZW1vdmUgY2xpZW50U2VjcmV0LlxyXG4gICAgICAgICAgICAgICAgY2xpZW50U2VjcmV0ID0gJyZjbGllbnRfc2VjcmV0PUQzTkZBM1BUNU5DNTQ0MEU1U0pFT0JKWVlETjFCWTIwQUFTR1hHRjAxMkY1WTFORCcsXHJcbiAgICAgICAgICAgICAgICB2ZXJzaW9uID0gJyZ2PTIwMTMwODE1JyxcclxuICAgICAgICAgICAgICAgIGxhdExuZyA9ICcmbGw9JyArIGxvY2F0aW9uKCkuc2hvcnRMYXRMbmcoKSxcclxuICAgICAgICAgICAgICAgIHF1ZXJ5ID0gJyZxdWVyeT0nICsgbG9jYXRpb24oKS5uYW1lKCkuc3BsaXQoJyAnKS5qb2luKCclMjAnKSxcclxuICAgICAgICAgICAgICAgIGxpbWl0ID0gJyZsaW1pdD0xJztcclxuXHJcblxyXG4gICAgICAgICAgICBsb2NhdGlvbigpLmZvdXJzcXVhcmVRdWVyeVVybCggIGJhc2VVcmwgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudElkICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRTZWNyZXQgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnNpb24gK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdExuZyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbWl0KTtcclxuXHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIGZvdXJzcXVhcmUuZ2V0Q2hlY2tpbnNDb3VudEZvciA9IGZ1bmN0aW9uIChsb2NhdGlvbiwgYWN0aXZpdHksIGNhbGxiYWNrKSB7XHJcblxyXG4gICAgICAgICAgICBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgJC5nZXRKU09OKGxvY2F0aW9uKCkuZm91cnNxdWFyZVF1ZXJ5VXJsKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlcykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcy5yZXNwb25zZS52ZW51ZXMubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb2NhdGlvbkNoZWNraW5zID0gcmVzLnJlc3BvbnNlLnZlbnVlc1swXS5zdGF0cy5jaGVja2luc0NvdW50O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uQ2hlY2tpbnMgPyBsb2NhdGlvbigpLmNoZWNraW5zKGxvY2F0aW9uQ2hlY2tpbnMpIDogbG9jYXRpb24oKS5jaGVja2lucygwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbigpLmNoZWNraW5zKDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sb3IgPSBsb2NhdGlvbigpLmdldENvbG9yKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbigpLm1hcmtlciA9IGNhbGxiYWNrKGxvY2F0aW9uLCBhY3Rpdml0eSwgY29sb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmZhaWwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnKioqKipUaGVyZSB3YXMgYW4gZXJyb3IgcmV0cmlldmluZyBmb3Vyc3F1YXJlIGluZm8gZm9yICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24oKS5uYW1lKCkgKyAnKioqKionKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIH0sIHRoaXMpO1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIHdpbmRvdy5mb3Vyc3F1YXJlU2VydmljZSA9IGZvdXJzcXVhcmVTZXJ2aWNlO1xyXG5cclxufSgpKTsiLCJcclxuKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgLy8gQSBgTG9jYXRpb25gIHJlcHJlc2VudHMgYW55IHBsYWNlIHJlc3VsdCBvZiBhbiBhY3Rpdml0eSBxdWVyeTsgbm90IHRvIGJlIGNvbmZ1c2VkIHdpdGggYSBnZW9sb2NhdGlvbiB3aGljaFxyXG4gICAgLy8gcmVwcmVzZW50cyBhIGNpdHkgb3IgZ2VvZ3JhcGhpYyByZWdpb24gcHJlc2VudGVkIG9uIHRoZSBtYXAuXHJcbiAgICB2YXIgTG9jYXRpb25zVmlld01vZGVsID0gZnVuY3Rpb24gKG1hcFZtLCBmb3Vyc3F1YXJlU2VydmljZSkge1xyXG5cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogIFRvcC1sZXZlbCB2YXJpYWJsZXMgYW5kIHByb3BlcnRpZXMgZm9yIGBMb2NhdGlvbnNWaWV3TW9kZWwoKWBcclxuICAgICAgICAgKi9cclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG5cclxuICAgICAgICAvLyBJbml0aWFsaXplIGBmaWx0ZXJRdWVyeWAgb2JzZXJ2YWJsZSB0byBiaW5kIHRvIHVzZXIgaW5wdXQgaW4gdGhlIGxvY2F0aW9ucyBmaWx0ZXIgZm9ybS5cclxuICAgICAgICB2bS5maWx0ZXJRdWVyeSA9IGtvLm9ic2VydmFibGUoJycpO1xyXG5cclxuICAgICAgICB2bS5zZWxlY3RlZExvY2F0aW9uID0ga28ub2JzZXJ2YWJsZSgnaGVsbG8nKTtcclxuXHJcbiAgICAgICAgdm0uYWN0aXZpdGllcyA9IGtvLm9ic2VydmFibGVBcnJheShbXSk7XHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAgQWN0aXZpdHkgbG9jYXRpb25zIHNlYXJjaCBmdW5jdGlvblxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLnNlYXJjaExvY2F0aW9ucyA9IGZ1bmN0aW9uIChhY3Rpdml0eSkge1xyXG5cclxuICAgICAgICAgICAgdmFyIG1hcEJvdW5kcyA9IHdpbmRvdy5tYXAuZ2V0Qm91bmRzKCk7XHJcblxyXG4gICAgICAgICAgICBtYXBWbS5wbGFjZXNTZXJ2aWNlLnRleHRTZWFyY2goe1xyXG4gICAgICAgICAgICAgICAgYm91bmRzOiBtYXBCb3VuZHMsXHJcbiAgICAgICAgICAgICAgICBxdWVyeTogYWN0aXZpdHkoKS50aXRsZVxyXG4gICAgICAgICAgICB9LCBjYWxsYmFjayk7XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBjYWxsYmFjayhyZXN1bHRzLCBzdGF0dXMpIHtcclxuXHJcbiAgICAgICAgICAgICAgICBpZiAoc3RhdHVzID09PSBnb29nbGUubWFwcy5wbGFjZXMuUGxhY2VzU2VydmljZVN0YXR1cy5PSyAmJlxyXG4gICAgICAgICAgICAgICAgICAgIHJlc3VsdHMubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIgaW5Cb3VuZExvY2F0aW9ucyA9IHN1cHByZXNzT3V0T2ZCb3VuZHNMb2NhdGlvbnMocmVzdWx0cyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIGxvY2F0aW9ucyBhcmUgZm91bmQgaW5zaWRlIG9mIHZpc2libGUgbWFwIGJvdW5kYXJpZXMuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGluQm91bmRMb2NhdGlvbnMubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29uc3RydWN0IGBMb2NhdGlvbmAgb2JzZXJ2YWJsZXMgYW5kIHB1c2ggdG8gYGFjdGl2aXR5KCkucmVzdWx0c2AuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uZWFjaChpbkJvdW5kTG9jYXRpb25zLCBmdW5jdGlvbiAobG9jYXRpb25EYXRhKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2YXIgbG9jID0ga28ub2JzZXJ2YWJsZShuZXcgTG9jYXRpb24obG9jYXRpb25EYXRhKSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVxdWVzdCBmb3Vyc3F1YXJlIGRhdGEgZm9yIGVhY2ggbG9jYXRpb24gJiBzYXZlIHRoZSByZXN1bHRzIGFzIGEgbG9jYXRpb24gcHJvcGVydHkuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB2bS5yZXF1ZXN0Rm91cnNxdWFyZURhdGEobG9jLCBhY3Rpdml0eSwgbWFwVm0uYWRkTWFya2VyKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eSgpLnJlc3VsdHMucHVzaChsb2MpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJZiB0aGUgYWN0aXZpdHkgd2FzIHByZXZpb3VzbHkgbWFkZSBpbnZpc2libGUgZHVlIHRvIHRoZXJlIGJlaW5nIG5vIGxvY2F0aW9uIHJlc3VsdHMgZm9yIGFcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gcHJldmlvdXMgZ2VvbG9jYXRpb24sIHNldCB0aGUgdmlzaWJpbGl0eSB0byB0cnVlIHNvIHRoYXQgdGhlIHJlc3VsdHMgd2lsbCBiZSBkaXNwbGF5ZWQuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpdml0eSgpLm5vUmVzdWx0c0Zvckxhc3RHZW9sb2NhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHkoKS5ub1Jlc3VsdHNGb3JMYXN0R2VvbG9jYXRpb24gPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5KCkudmlzaWJsZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uYWN0aXZpdGllcy5wdXNoKGFjdGl2aXR5KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5KCkudmlzaWJsZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5KCkubm9SZXN1bHRzRm9yTGFzdEdlb2xvY2F0aW9uID0gdHJ1ZTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFdlIHN0aWxsIHdhbnQgdG8gc2F2ZSB0aGUgYWN0aXZpdHkgc28gdGhhdCBpdCBjYW4gYmUgcXVlcmllZCBhZ2FpbiBmb3IgbmV3IGdlb2xvY2F0aW9ucy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uYWN0aXZpdGllcy5wdXNoKGFjdGl2aXR5KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFsZXJ0KCdTb3JyeSwgdGhlcmUgYXJlIG5vIGxvY2F0aW9ucyBmb3IgJyArIGFjdGl2aXR5KCkudGl0bGUgKyAnIGluIHRoZSBjdXJyZW50IG1hcCBib3VuZHMuJyk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ1NvcnJ5LCB0aGVyZSB3YXMgYSBwcm9ibGVtIHJldHJpZXZpbmcgcmVzdWx0cyBmb3IgdGhlIGZvbGxvd2luZyByZWFzb246ICcgKyBzdGF0dXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBzdXBwcmVzc091dE9mQm91bmRzTG9jYXRpb25zKGxvY2F0aW9ucykge1xyXG4gICAgICAgICAgICAgICAgdmFyIGxvY0xhdCwgbG9jTG5nO1xyXG4gICAgICAgICAgICAgICAgdmFyIGluQm91bmRMb2NhdGlvbnMgPSBbXTtcclxuICAgICAgICAgICAgICAgIF8uZWFjaChsb2NhdGlvbnMsIGZ1bmN0aW9uIChsb2NhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY0xhdCA9IGxvY2F0aW9uLmdlb21ldHJ5LmxvY2F0aW9uLmxhdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY0xuZyA9IGxvY2F0aW9uLmdlb21ldHJ5LmxvY2F0aW9uLmxuZygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBTdG9yZSBlYWNoIGBsb2NhdGlvbmAgb25seSBpZiBpdCBpcyBjb250YWluZWQgd2l0aGluIHRoZSBtYXAgYm91bmRhcmllcyBhdCBjdXJyZW50IHpvb20gbGV2ZWwuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1hcEJvdW5kcy5ILkggPCBsb2NMYXQgJiYgbG9jTGF0IDwgbWFwQm91bmRzLkguaiAmJlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBtYXBCb3VuZHMuai5IID4gbG9jTG5nICYmIGxvY0xuZyA+IG1hcEJvdW5kcy5qLmopIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGluQm91bmRMb2NhdGlvbnMucHVzaChsb2NhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgcmV0dXJuIGluQm91bmRMb2NhdGlvbnM7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogIFJldHJpZXZlIGZvdXJzcXVhcmUgZGF0YVxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLnJlcXVlc3RGb3Vyc3F1YXJlRGF0YSA9IGZ1bmN0aW9uIChsb2NhdGlvbiwgYWN0aXZpdHksIGNhbGxiYWNrKSB7XHJcbiAgICAgICAgICAgIGZvdXJzcXVhcmVTZXJ2aWNlLm1ha2VRdWVyeVVybChsb2NhdGlvbik7XHJcbiAgICAgICAgICAgIGZvdXJzcXVhcmVTZXJ2aWNlLmdldENoZWNraW5zQ291bnRGb3IobG9jYXRpb24sIGFjdGl2aXR5LCBjYWxsYmFjayk7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICBMb2NhdGlvbnMgZmlsdGVyIGZ1bmN0aW9uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uZmlsdGVyUXVlcnkuc3Vic2NyaWJlKGZ1bmN0aW9uIGZpbHRlckFsZ29yaXRobSgpIHtcclxuXHJcbiAgICAgICAgICAgIGlmIChmaWx0ZXJJbnB1dElzRW1wdHkoKSkge1xyXG4gICAgICAgICAgICAgICAgdW5maWx0ZXJSZXN1bHRzKCk7XHJcbiAgICAgICAgICAgICAgICBtYXBWbS5zaG93TWFya2Vyc0ZvclZpc2libGVBY3Rpdml0aWVzKHZtLmFjdGl2aXRpZXMpO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGZpbHRlclJlc3VsdHMoKTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgLy8gVE9ETzogcmVkaXNwbGF5IHNlbGVjdGVkIGxvY2F0aW9uIGluZm8gd2luZG93IGFmdGVyIGZpbHRlci5cclxuICAgICAgICAgICAgZnVuY3Rpb24gZmlsdGVyUmVzdWx0cygpIHtcclxuICAgICAgICAgICAgICAgIFxyXG4gICAgICAgICAgICAgICAgdmFyIGFjdGl2aXR5VmlzaWJpbGl0eUR1cmluZ0ZpbHRlcjtcclxuXHJcbiAgICAgICAgICAgICAgICBfLmVhY2godm0uYWN0aXZpdGllcygpLCBmdW5jdGlvbiAoYWN0aXZpdHkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGl2aXR5KCkucmVzdWx0cygpLmxlbmd0aCA+IDApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIF8uZWFjaChhY3Rpdml0eSgpLnJlc3VsdHMoKSwgZnVuY3Rpb24gKGxvY2F0aW9uKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gSGlkZSB0aGUgbG9jYXRpb24gbGlzdCBpdGVtcyBhbmQgbWFwIG1hcmtlcnMgZm9yIGZpbHRlcmVkLW91dCBsb2NhdGlvbnMuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiggIShsb2NhdGlvbigpLmNvbnRhaW5zKHZtLmZpbHRlclF1ZXJ5KCkpKSApIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24oKS52aXNpYmxlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBWbS5oaWRlTWFya2VyKGxvY2F0aW9uKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2F0aW9uKCkuc2VsZWN0ZWQoKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBWbS5yZXNldEluZm9XaW5kb3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFRoZSBgYWN0aXZpdHlWaXNpYmlsaXR5RHVyaW5nRmlsdGVyYCBhbmQgYGhhc0ZpbHRlclJlc3VsdHNgIHN0YXRlcyB3aWxsIG9ubHkgcmVtYWluXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gZmFsc2UgaWYgdGhlcmUgYXJlIHplcm8gbG9jYXRpb24gcmVzdWx0cyB3aXRoaW4gYW4gYWN0aXZpdHkgY29udGFpbmluZyB0aGUgZmlsdGVyXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gcXVlcnkgc3RyaW5nLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5VmlzaWJpbGl0eUR1cmluZ0ZpbHRlciA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5KCkuaGFzRmlsdGVyUmVzdWx0cyhmYWxzZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmUtZGlzcGxheSBwcmV2aW91c2x5IGhpZGRlbiBsb2NhdGlvbnMgYW5kIG1hcmtlcnMgKHdoZW4gYGJhY2tzcGFjZWAgaXMgcHJlc3NlZCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3IgaW5zdGFuY2UpLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uKCkudmlzaWJsZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eSgpLmhhc0ZpbHRlclJlc3VsdHModHJ1ZSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpdml0eSgpLmNoZWNrZWQoKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBWbS5zaG93TWFya2VyKGxvY2F0aW9uKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlb3BlbiBpbmZvIHdpbmRvdyBmb3Igc2VsZWN0ZWQgbG9jYXRpb24uXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb2NhdGlvbigpLnNlbGVjdGVkKCkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcFZtLmluZm9XaW5kb3coKS5vcGVuKHdpbmRvdy5tYXAsIGxvY2F0aW9uKCkubWFya2VyKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDaGVjayBpZiBhbnkgYWN0aXZpdHkgbG9jYXRpb25zIGhhdmUgYXJlIHZpc2libGUgYWdhaW4sIGFuZCBpZiBzbyBzZXRcclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYGFjdGl2aXR5VmlzaWJpbGl0eUR1cmluZ0ZpbHRlcmAgdG8gdHJ1ZSAoc28gbG9uZyBhcyB0aGUgYWN0aXZpdHkgd2FzIGBjaGVja2VkYCBwcmlvciB0b1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBzdGFydGluZyB0aGUgZmlsdGVyIHF1ZXJ5KS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgXy5zb21lKGFjdGl2aXR5KCkucmVzdWx0cygpLCBmdW5jdGlvbiAobG9jYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChsb2NhdGlvbigpLnZpc2libGUoKSAmJiBhY3Rpdml0eSgpLmNoZWNrZWQoKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5VmlzaWJpbGl0eUR1cmluZ0ZpbHRlciA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHkoKS5oYXNGaWx0ZXJSZXN1bHRzKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgVUkgYWZ0ZXIgZXZlcnkga2V5c3Ryb2tlLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eSgpLnZpc2libGUoYWN0aXZpdHlWaXNpYmlsaXR5RHVyaW5nRmlsdGVyKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gZmlsdGVySW5wdXRJc0VtcHR5KCkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZtLmZpbHRlclF1ZXJ5KCkudHJpbSgpID09PSAnJztcclxuICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgZnVuY3Rpb24gdW5maWx0ZXJSZXN1bHRzKCkge1xyXG4gICAgICAgICAgICAgICAgXy5lYWNoKHZtLmFjdGl2aXRpZXMoKSwgZnVuY3Rpb24gKGFjdGl2aXR5KSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIF8uZWFjaChhY3Rpdml0eSgpLnJlc3VsdHMoKSwgZnVuY3Rpb24gKGxvY2F0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uKCkudmlzaWJsZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzZXRJbml0aWFsVmlzaWJpbGl0eShhY3Rpdml0eSk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICBmdW5jdGlvbiByZXNldEluaXRpYWxWaXNpYmlsaXR5KGFjdGl2aXR5KSB7XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGl2aXR5KCkucmVzdWx0cygpLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eSgpLnZpc2libGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGl2aXR5KCkuY2hlY2tlZCgpID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpdml0eSgpLnJlc3VsdHMoKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eSgpLnZpc2libGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eSgpLmhhc0ZpbHRlclJlc3VsdHModHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZpdHkoKS5yZXN1bHRzKCkubGVuZ3RoID4gMCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHkoKS5oYXNGaWx0ZXJSZXN1bHRzKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICAvLyBIYWNrIHRvIHByZXZlbnQgcGFnZSByZWxvYWQgb24gdGhlIGZpbHRlciBmb3JtIHN1Ym1pc3Npb24uXHJcbiAgICAgICAgdm0ucHJldmVudERlZmF1bHQgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIC8vIChkbyBub3RoaW5nLilcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogIFVwZGF0ZSBsb2NhdGlvbnMgd2hlbiB0aGUgZ2VvbG9jYXRpb24gY2hhbmdlc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIG1hcFZtLmN1cnJlbnRHZW9sb2NhdGlvbi5zdWJzY3JpYmUoZnVuY3Rpb24gdXBkYXRlTG9jYXRpb25zKCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIGNvcHk7XHJcblxyXG4gICAgICAgICAgICBpZiAodm0uYWN0aXZpdGllcygpKVxyXG4gICAgICAgICAgICAgICAgY29weSA9IHZtLmFjdGl2aXRpZXMoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIENsZWFyIGN1cnJlbnRseSBkaXNwbGF5ZWQgbWFwIG1hcmtlcnMsIGFuZCBjbGVhciBzdG9yZWQgTG9jYXRpb24gcmVzdWx0cy4gT25seSBjbGVhcmluZyB0aGUgZW50aXJlXHJcbiAgICAgICAgICAgIC8vIGB2bS5hY3Rpdml0aWVzKClgLCBhcyBiZWxvdyBvYmplY3QgZG9lcyBub3QgdXBkYXRlIHRoZSBVSSBpbiB0aGUgd2F5IG9uZSB3b3VsZCBleHBlY3Q7IHdpdGhvdXQgaXRlcmF0aW5nXHJcbiAgICAgICAgICAgIC8vIG92ZXIgdGhlIGFjdGl2aXR5IHJlc3VsdHMsIHRoZSBsb2NhdGlvbiByZXN1bHRzIGZvciB0aGUgcHJldmlvdXMgZ2VvbG9jYXRpb24gY29udGludWUgdG8gYXBwZWFyLlxyXG4gICAgICAgICAgICBfLmVhY2godm0uYWN0aXZpdGllcygpLCBmdW5jdGlvbiAoYWN0aXZpdHkpIHtcclxuICAgICAgICAgICAgICAgIF8uZWFjaChhY3Rpdml0eSgpLnJlc3VsdHMoKSwgZnVuY3Rpb24gKGxvY2F0aW9uKXtcclxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbigpLm1hcmtlci5zZXRNYXAobnVsbCk7XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgICAgIGFjdGl2aXR5KCkucmVzdWx0cyhbXSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgdm0uYWN0aXZpdGllcyhbXSk7XHJcblxyXG4gICAgICAgICAgICAvLyBVcGRhdGUgTG9jYXRpb24gcmVzdWx0cyBmb3IgbmV3IEdlb2xvY2F0aW9uXHJcbiAgICAgICAgICAgIF8uZWFjaChjb3B5LCBmdW5jdGlvbiAoYWN0aXZpdHkpIHtcclxuICAgICAgICAgICAgICAgIHZtLnNlYXJjaExvY2F0aW9ucyhhY3Rpdml0eSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG5cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogIFNlbGVjdGVkIGxvY2F0aW9uIGZ1bmN0aW9uc1xyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZtLnNlbGVjdExvY2F0aW9uID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBVbi1zZWxlY3QgYWxsIGxvY2F0aW9ucyBzbyB0aGF0IG9ubHkgb25lIGxvY2F0aW9uIGFwcGVhcnMgc2VsZWN0ZWQgYXQgYSB0aW1lLlxyXG4gICAgICAgICAgICB2bS5jbGVhckN1cnJlbnRTZWxlY3Rpb25zKCk7XHJcblxyXG4gICAgICAgICAgICAvLyBUaGUgYHNlbGVjdGVkKClgIG9ic2VydmFibGUgcHJvcGVydHkgaXMgdXNlZCB0byBjb250cm9sIHRoZSBjc3MgYGJhY2tncm91bmQtY29sb3JgIG9mIHRoZSBsb2NhdGlvbiBlbGVtZW50LlxyXG4gICAgICAgICAgICBsb2NhdGlvbi5zZWxlY3RlZCh0cnVlKTtcclxuICAgICAgICAgICAgdm0uc2VsZWN0ZWRMb2NhdGlvbihsb2NhdGlvbik7XHJcblxyXG4gICAgICAgICAgICBtYXBWbS5zaG93SW5mb1dpbmRvdyhsb2NhdGlvbik7XHJcbiAgICAgICAgICAgIG1hcFZtLmNlbnRlck1hcEF0KGxvY2F0aW9uKTtcclxuICAgICAgICAgICAgbWFwVm0uYm91bmNlQW5pbWF0ZShsb2NhdGlvbi5tYXJrZXIpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmNsZWFyQ3VycmVudFNlbGVjdGlvbnMgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIF8uZWFjaCh2bS5hY3Rpdml0aWVzKCksIGZ1bmN0aW9uIChhY3Rpdml0eSkge1xyXG4gICAgICAgICAgICAgICAgXy5lYWNoKGFjdGl2aXR5KCkucmVzdWx0cygpLCBmdW5jdGlvbiAobG9jYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbigpLnNlbGVjdGVkKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5hc3NpZ25Db2xvcnNUb0xvY2F0aW9ucyA9IGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uZ2V0UmVmZXJlbmNlVG9BY3Rpdml0aWVzT2JqZWN0ID0gZnVuY3Rpb24gKGFjdGl2aXRpZXMpIHtcclxuICAgICAgICAgICAgdm0uYWN0aXZpdGllcyA9IGFjdGl2aXRpZXM7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0ucGFzc1NlbGZUb01hcFZtID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBtYXBWbS5sb2NhdGlvbnNWbSA9IHZtO1xyXG4gICAgICAgIH07XHJcbiAgICAgICAgdm0ucGFzc1NlbGZUb01hcFZtKCk7XHJcblxyXG4gICAgICAgIHZtLnBhc3NTZWxlY3RlZExvY2F0aW9uVG9NYXBWbSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgbWFwVm0uc2VsZWN0ZWRMb2NhdGlvbih2bS5zZWxlY3RlZExvY2F0aW9uKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5zZWxlY3RlZExvY2F0aW9uLnN1YnNjcmliZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgdm0ucGFzc1NlbGVjdGVkTG9jYXRpb25Ub01hcFZtKCk7XHJcbiAgICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIHdpbmRvdy5Mb2NhdGlvbnNWaWV3TW9kZWwgPSBMb2NhdGlvbnNWaWV3TW9kZWw7XHJcblxyXG59KSgpO1xyXG5cclxuIiwiXHJcbihmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBBY3Rpdml0aWVzVmlld01vZGVsID0gZnVuY3Rpb24gKG1hcFZtLCBsb2NhdGlvbnNWbSkge1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAgVG9wLWxldmVsIHZhcmlhYmxlcyBhbmQgcHJvcGVydGllcyBmb3IgYEFjdGl2aXRpZXNWaWV3TW9kZWwoKWBcclxuICAgICAgICAgKi9cclxuICAgICAgICB2YXIgdm0gPSB0aGlzO1xyXG5cclxuICAgICAgICB2bS5kZWZhdWx0QWN0aXZpdGllcyA9IFtcclxuICAgICAgICAgICAgJ0NvZmZlZScsXHJcbiAgICAgICAgICAgICdWZWdldGFyaWFuJyxcclxuICAgICAgICAgICAgJ1BhcmsnLFxyXG4gICAgICAgICAgICAnTWV4aWNhbicsXHJcbiAgICAgICAgICAgICdBcnQgR2FsbGVyeSddO1xyXG5cclxuICAgICAgICB2bS5hY3Rpdml0aWVzID0ga28ub2JzZXJ2YWJsZUFycmF5KCk7XHJcbiAgICAgICAgdm0uYWN0aXZpdHlRdWVyeSA9IGtvLm9ic2VydmFibGUoKTtcclxuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICBEaXNwbGF5IGxvY2F0aW9ucyBmb3IgZGVmYXVsdCBhY3Rpdml0aWVzXHJcbiAgICAgICAgICovXHJcblxyXG4gICAgICAgICAgICAvLyBTZWFyY2ggZm9yIChhbmQgZGlzcGxheSkgbG9jYXRpb25zIGZvciB0aGUgZGVmYXVsdCBhY3Rpdml0aWVzIG9uY2UgdGhlIG1hcCBoYXMgZnVsbHkgbG9hZGVkIGFuZCBHb29nbGUgUGxhY2VzXHJcbiAgICAgICAgICAgIC8vIFNlcnZpY2UgaXMgcmVhZHkgdG8gcmVjZWl2ZSBxdWVyaWVzLlxyXG4gICAgICAgIG1hcFZtLnJlYWR5U3RhdGUuc3Vic2NyaWJlKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG1hcFZtLnJlYWR5U3RhdGUoKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgdm0uZGlzcGxheURlZmF1bHRBY3Rpdml0aWVzKCk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgdm0uZGlzcGxheURlZmF1bHRBY3Rpdml0aWVzID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgdm0ucGFzc1JlZmVyZW5jZVRvTG9jYXRpb25zVm0oKTtcclxuXHJcbiAgICAgICAgICAgIF8uZWFjaCh2bS5kZWZhdWx0QWN0aXZpdGllcywgZnVuY3Rpb24gKGFjdGl2aXR5TmFtZSkge1xyXG4gICAgICAgICAgICAgICAgdmFyIGFjdGl2aXR5ID0ga28ub2JzZXJ2YWJsZShuZXcgQWN0aXZpdHkoYWN0aXZpdHlOYW1lKSk7XHJcbiAgICAgICAgICAgICAgICBsb2NhdGlvbnNWbS5zZWFyY2hMb2NhdGlvbnMoYWN0aXZpdHkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogIE5ldyBhY3Rpdml0eSBmdW5jdGlvbnNcclxuICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgICAgIC8vIFRPRE86IFZhbGlkYXRlIGlucHV0IGFuZCBoYW5kbGUgZHVwbGljYXRlcyAoYWxzbyB3aGF0IGRvIGRvIGFmdGVyIG1hcCBpcyByZXNpemVkKS5cclxuICAgICAgICB2bS5hZGRBY3Rpdml0eSA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgdmFyIGFjdGl2aXR5ID0ga28ub2JzZXJ2YWJsZShuZXcgQWN0aXZpdHkodm0uYWN0aXZpdHlRdWVyeSgpKSk7XHJcbiAgICAgICAgICAgIGxvY2F0aW9uc1ZtLnNlYXJjaExvY2F0aW9ucyhhY3Rpdml0eSk7XHJcbiAgICAgICAgICAgIHZtLmFjdGl2aXR5UXVlcnkoJycpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLnBhc3NSZWZlcmVuY2VUb0xvY2F0aW9uc1ZtID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBsb2NhdGlvbnNWbS5nZXRSZWZlcmVuY2VUb0FjdGl2aXRpZXNPYmplY3Qodm0uYWN0aXZpdGllcyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uYWN0aXZpdGllcy5zdWJzY3JpYmUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2bS5wYXNzUmVmZXJlbmNlVG9Mb2NhdGlvbnNWbSgpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB2bS5yZXNldEluZm9XaW5kb3dXaGVuU2VsZWN0ZWRMb2NhdGlvblRvZ2dsZWRWaXNpYmxlID0gZnVuY3Rpb24gKGFjdGl2aXR5KSB7XHJcblxyXG4gICAgICAgICAgICBfLmVhY2goYWN0aXZpdHkucmVzdWx0cygpLCBmdW5jdGlvbiAobG9jYXRpb24pIHtcclxuICAgICAgICAgICAgICAgIGlmIChsb2NhdGlvbigpLnNlbGVjdGVkKCkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICBzd2l0Y2ggKGFjdGl2aXR5LmNoZWNrZWQoKSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIGZhbHNlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwVm0ucmVzZXRJbmZvV2luZG93KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2FzZSB0cnVlOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwVm0uaW5mb1dpbmRvdygpLm9wZW4od2luZG93Lm1hcCwgbG9jYXRpb24oKS5tYXJrZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIFxyXG4gICAgfTtcclxuXHJcbiAgICB3aW5kb3cuQWN0aXZpdGllc1ZpZXdNb2RlbCA9IEFjdGl2aXRpZXNWaWV3TW9kZWw7XHJcblxyXG59KCkpO1xyXG4iLCJcclxuKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBNYXN0ZXIgVmlld01vZGVsIGNvbnN0cnVjdG9yXHJcbiAgICAgKi9cclxuICAgIHZhciBBcHBWaWV3TW9kZWwgPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuXHJcbiAgICAgICAgdm0uZm91cnNxdWFyZVNlcnZpY2UgPSBuZXcgZm91cnNxdWFyZVNlcnZpY2UoKTtcclxuXHJcbiAgICAgICAgdm0uTWFwVmlld01vZGVsID0gbmV3IE1hcFZpZXdNb2RlbCh2bS5mb3Vyc3F1YXJlU2VydmljZSk7XHJcbiAgICAgICAgdm0uTG9jYXRpb25zVmlld01vZGVsID0gbmV3IExvY2F0aW9uc1ZpZXdNb2RlbCh2bS5NYXBWaWV3TW9kZWwsIHZtLmZvdXJzcXVhcmVTZXJ2aWNlKTtcclxuICAgICAgICB2bS5BY3Rpdml0aWVzVmlld01vZGVsID0gbmV3IEFjdGl2aXRpZXNWaWV3TW9kZWwodm0uTWFwVmlld01vZGVsLCB2bS5Mb2NhdGlvbnNWaWV3TW9kZWwpO1xyXG5cclxuICAgIH07XHJcblxyXG4gICAgd2luZG93LkFwcFZpZXdNb2RlbCA9IEFwcFZpZXdNb2RlbDtcclxuXHJcbn0oKSk7XHJcblxyXG5cclxuIiwiXHJcbihmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogIEluaXRpYWxpemUgdGhlIG1hc3RlciBWaWV3TW9kZWxcclxuICAgICAqL1xyXG4gICAgdmFyIGFwcCA9IG5ldyBBcHBWaWV3TW9kZWwoKTtcclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAgUmVuZGVyIHRoZSBVSSBjb21wb25lbnRzLCBhbmQgYXBwbHkga25vY2tvdXQgZGF0YSBiaW5kaW5nc1xyXG4gICAgICovXHJcbiAgICBkaXNwbGF5Q29tcG9uZW50cyhbJ3NlYXJjaGJhcicsICdzaWRlYmFyJ10pO1xyXG5cclxuICAgIC8vIEZvciB0aGlzIHByb2plY3QsIEkgZGVjaWRlZCB0byBtYWtlIHRoaXMgY29tcG9uZW50IGxvYWRlciBpbiBsaWV1IG9mIHVzaW5nIHNvbWV0aGluZyBsaWtlIHJlcXVpcmVqcy4gSSBkaWRcclxuICAgIC8vIGF0dGVtcHQgdG8gaW1wbGVtZW50IHJlcXVpcmVqcywgYnV0IHRoZSBjb25zb2xlIGVycm9ycyBkaWRuJ3QgcHJvdmlkZSBtZSB3aXRoIHNwZWNpZmljIGVub3VnaCBpbmZvcm1hdGlvbiB0b1xyXG4gICAgLy8gc29ydCBvdXQgd2hhdCB3YXMgd3Jvbmcgd2l0aCBteSBjb2RlLiBJbiBhbnkgY2FzZSwgZm9yIHRoZSBzY29wZSBvZiB0aGlzIHNpbmdsZS1wYWdlLWFwcCwgbXkgc29sdXRpb24gc2VlbXMgdG9cclxuICAgIC8vIHdvcmsgZmluZS5cclxuICAgIGZ1bmN0aW9uIGRpc3BsYXlDb21wb25lbnRzKGNvbXBvbmVudHMpIHtcclxuXHJcbiAgICAgICAgdmFyICRjb21wb25lbnQsIHRlbXBsYXRlVXJsLCBpZCwgaHRtbDtcclxuICAgICAgICBfLmVhY2goY29tcG9uZW50cywgZnVuY3Rpb24gKGNvbXBvbmVudCkge1xyXG5cclxuICAgICAgICAgICAgdmFyIGNvbnRhaW5lciA9ICcjb3ZlcmxheS0nICsgY29tcG9uZW50O1xyXG4gICAgICAgICAgICAkY29tcG9uZW50ID0gJCgnPGRpdj4nKTtcclxuICAgICAgICAgICAgdGVtcGxhdGVVcmwgPSAnLi9idWlsZC9jb21wb25lbnRzLycgKyBjb21wb25lbnQgKyAnLycgKyBjb21wb25lbnQgKyAnLmh0bWwnO1xyXG4gICAgICAgICAgICBpZCA9ICcjJyArIGNvbXBvbmVudDtcclxuXHJcbiAgICAgICAgICAgICRjb21wb25lbnQubG9hZCh0ZW1wbGF0ZVVybCwgaWQsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIGh0bWwgPSAkKHRoaXMpLnByb3AoJ291dGVySFRNTCcpO1xyXG4gICAgICAgICAgICAgICAgJChjb250YWluZXIpLmFwcGVuZChodG1sKTtcclxuXHJcbiAgICAgICAgICAgICAgICBrby5hcHBseUJpbmRpbmdzKGFwcCwgZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoY29tcG9uZW50KSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuXHJcbiAgICAvKipcclxuICAgICAqICBNYWtlIHRoZSBVSSBjb21wb25lbnRzIGRyYWdnYWJsZVxyXG4gICAgICovXHJcbiAgICAkKGRvY3VtZW50KS5yZWFkeShcclxuICAgICAgICBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICQoJyNvdmVybGF5LXNlYXJjaGJhcicpLmRyYWdnYWJsZSgpO1xyXG4gICAgICAgICAgICAkKCcjb3ZlcmxheS1zaWRlYmFyJykuZHJhZ2dhYmxlKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG59KCkpOyJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
