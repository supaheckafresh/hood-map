!function(){"use strict";var e=function(e){this.title=e,this.results=ko.observableArray(),this.visible=ko.observable(!0),this.checked=ko.observable(!0),this.hasFilterResults=ko.observable()};e.prototype.toggleMarkersVisible=function(){var e=this;if(e.toggleChecked(),e.results().length>0){var o=_.head(e.results());null!==o().marker.getMap()&&(e.mapReference=o().marker.getMap()),_.each(e.results(),function(o){null===o().marker.getMap()?o().marker.setMap(e.mapReference):o().marker.setMap(null)})}return!0},e.prototype.toggleChecked=function(){var e=this;return e.checked(!e.checked()),!0},window.Activity=e}(),function(){"use strict";var e=function(e){this.name=ko.observable(e.name),this.visible=ko.observable(!0),this.selected=ko.observable(!1),this.place_id=ko.observable(e.place_id),this.formatted_address=ko.observable(e.formatted_address),this.geometry=ko.observable(e.geometry),this.types=ko.observableArray(e.types),this.marker=null,this.foursquareQueryUrl=ko.observable(""),this.checkins=ko.observable()};e.prototype.contains=function(e,o){return o===!0?this.name().includes(e):this.name().toLowerCase().indexOf(e.toLowerCase())>-1},e.prototype.shortLatLng=function(){return Math.round(1e3*this.geometry().location.lat())/1e3+","+Math.round(1e3*this.geometry().location.lng())/1e3},e.prototype.getColor=function(){var e=this.checkins();switch(!0){case e>1e3:return"1";case e>600:return"2";case e>350:return"3";case e>120:return"4";case e>60:return"5";case e>30:return"6";case e>16:return"7";default:return"7"}},window.Location=e}(),function(){"use strict";var e=function(e){var o=this;window.map=null;var t;o.infoWindow=ko.observable(),o.readyState=ko.observable(!1);var i={searchStr:"Long Beach, CA",center:{lat:33.77,lng:-118.194}};o.geolocationName=ko.observable(i.searchStr),o.cachedgeolocationName=ko.observable(i.searchStr),o.currentGeolocation=ko.observable(),o.locationsVm={},o.selectedLocation=ko.observable(),o.updateGeolocation=function(){""!==o.geolocationName().trim()?o.geo(o.geolocationName()):o.geolocationName(o.cachedgeolocationName())},window.initMap=function(){window.map=new google.maps.Map(document.getElementById("map"),{zoom:15,mapTypeId:google.maps.MapTypeId.TERRAIN}),console.log("Google Maps API has been called."),t=new google.maps.Geocoder,o.geo(o.geolocationName()),o.initInfoWindow(),o.placesService=new google.maps.places.PlacesService(map),o.placesService?(console.log("Google Places service has been initialized."),google.maps.event.addListenerOnce(map,"idle",function(){map.center?(o.readyState(!0),console.log("Google Maps has loaded successfully.")):alert("There was a problem loading the map.")})):alert("There was an error initializing Google Places service.")},o.geo=function(e){t.geocode({address:e},function(t,i){i==google.maps.GeocoderStatus.OK?(o.cachedgeolocationName(e),map.setCenter(t[0].geometry.location),o.currentGeolocation({center:{lat:t[0].geometry.location.lat(),lng:t[0].geometry.location.lng()}}),o.initInfoWindow(),console.log("Location has been set to: "+e)):(o.geolocationName(o.cachedgeolocationName()),alert("Geocoding was unsuccessful for the following reason: "+i))})},o.initInfoWindow=function(){o.infoWindow(new google.maps.InfoWindow),$.ajax("./build/components/infowindow/infowindow.html").done(function(e){o.infoWindow().setContent(e),o.infoWindow().open(null);var t=!1;google.maps.event.addListener(o.infoWindow(),"domready",function(){t===!1&&(ko.applyBindings(o,document.getElementById("infowindow-overlay")),t=!0)}),google.maps.event.addListener(o.infoWindow(),"closeclick",function(){t=!1,o.initInfoWindow()})})},o.resetInfoWindow=function(){o.infoWindow().open(null),o.initInfoWindow()},o.centerMapAt=function(e){var o=new google.maps.LatLng(e.geometry().location.lat(),e.geometry().location.lng());map.panTo(o)},o.addMarker=function(e,t,i){var n=t().visible()?map:null,a=new google.maps.Marker({map:n,title:e().name(),icon:"build/images/markers/marker_"+i+".png",position:e().geometry().location,id:e().place_id(),animation:google.maps.Animation.DROP});return function(t){google.maps.event.addListener(t,"click",function(){o.locationsVm.selectLocation(e()),o.showInfoWindow(e()),o.bounceAnimate(this)})}(a),a},o.showInfoWindow=function(e){o.infoWindow().open(map,e.marker)},o.showMarkersForVisibleActivities=function(e){_.each(e(),function(e){e().visible()===!0&&_.each(e().results(),function(e){o.showMarker(e)})})},o.hideMarker=function(e){e().marker.setMap(null)},o.showMarker=function(e){e().marker.getMap()!=map&&o.dropAnimate(e().marker)},o.dropAnimate=function(e){e.setMap(map),e.setAnimation(google.maps.Animation.DROP)},o.bounceAnimate=function(e){e.setAnimation(google.maps.Animation.BOUNCE),setTimeout(function(){e.setAnimation(null)},2125)}};window.MapViewModel=e}(),function(){"use strict";var e=function(){var e=this;e.makeQueryUrl=function(e){var o="https://api.foursquare.com/v2/venues/search",t="?client_id=PUXBJCP4B4HB2KIDIGQPHXEBAKWZPZO4HOWJZAJT45MOYWDO",i="&client_secret=D3NFA3PT5NC5440E5SJEOBJYYDN1BY20AASGXGF012F5Y1ND",n="&v=20130815",a="&ll="+e().shortLatLng(),s="&query="+e().name().split(" ").join("%20"),r="&limit=1";e().foursquareQueryUrl(o+t+i+n+a+s+r)},e.getCheckinsCountFor=function(e,o,t){ko.computed(function(){$.getJSON(e().foursquareQueryUrl()).then(function(i){if(i.response.venues.length>0){var n=i.response.venues[0].stats.checkinsCount;n?e().checkins(n):e().checkins(0)}else e().checkins(0);var a=e().getColor();e().marker=t(e,o,a)}).fail(function(){alert("There was a problem retrieving Foursquare check-ins for "+e().name())})},this)}};window.foursquareService=e}(),function(){"use strict";var e=function(e,o){var t=this;t.filterQuery=ko.observable(""),t.selectedLocation=ko.observable("hello"),t.activities=ko.observableArray([]),t.searchLocations=function(o){function i(i,a){if(a===google.maps.places.PlacesServiceStatus.OK&&i.length>0){var s=n(i);s.length>0?(_.each(s,function(i){var n=ko.observable(new Location(i));t.requestFoursquareData(n,o,e.addMarker),o().results.push(n)}),o().noResultsForLastGeolocation&&(o().noResultsForLastGeolocation=!1,o().visible(!0)),t.activities.push(o)):(o().visible(!1),o().noResultsForLastGeolocation=!0,t.activities.push(o),alert("Sorry, there are no locations for "+o().title+" in the current map bounds."))}else alert("Sorry, there was a problem retrieving results for the following reason: "+a)}function n(e){var o,t,i=[];return _.each(e,function(e){o=e.geometry.location.lat(),t=e.geometry.location.lng(),a.H.H<o&&o<a.H.j&&a.j.H>t&&t>a.j.j&&i.push(e)}),i}var a=window.map.getBounds();e.placesService.textSearch({bounds:a,query:o().title},i)},t.requestFoursquareData=function(e,t,i){o.makeQueryUrl(e),o.getCheckinsCountFor(e,t,i)},t.filterQuery.subscribe(function(){function o(){var o;_.each(t.activities(),function(i){i().results().length>0&&(_.each(i().results(),function(n){n().contains(t.filterQuery())?(n().visible(!0),i().hasFilterResults(!0),i().checked()===!0&&(e.showMarker(n),n().selected()===!0&&e.infoWindow().open(window.map,n().marker))):(n().visible(!1),e.hideMarker(n),n().selected()===!0&&e.resetInfoWindow(),o=!1,i().hasFilterResults(!1))}),_.some(i().results(),function(e){e().visible()&&i().checked()===!0&&(o=!0,i().hasFilterResults(!0))}),i().visible(o))})}function i(){return""===t.filterQuery().trim()}function n(){function e(e){0===e().results().length&&e().visible(!1),e().checked()===!0?e().results().length>0&&(e().visible(!0),e().hasFilterResults(!0)):e().results().length>0&&e().hasFilterResults(!0)}_.each(t.activities(),function(o){_.each(o().results(),function(e){e().visible(!0)}),e(o)})}i()?(n(),e.showMarkersForVisibleActivities(t.activities)):o()}),t.preventDefault=function(){},e.currentGeolocation.subscribe(function(){var e;t.activities()&&(e=t.activities()),_.each(t.activities(),function(e){_.each(e().results(),function(e){e().marker.setMap(null)}),e().results([])}),t.activities([]),_.each(e,function(e){t.searchLocations(e)})}),t.selectLocation=function(o){t.clearCurrentSelections(),o.selected(!0),t.selectedLocation(o),e.showInfoWindow(o),e.centerMapAt(o),e.bounceAnimate(o.marker)},t.clearCurrentSelections=function(){_.each(t.activities(),function(e){_.each(e().results(),function(e){e().selected(!1)})})},t.assignColorsToLocations=function(){},t.getReferenceToActivitiesObject=function(e){t.activities=e},t.passSelfToMapVm=function(){e.locationsVm=t},t.passSelfToMapVm(),t.passSelectedLocationToMapVm=function(){e.selectedLocation(t.selectedLocation)},t.selectedLocation.subscribe(function(){t.passSelectedLocationToMapVm()})};window.LocationsViewModel=e}(),function(){"use strict";var e=function(e,o){var t=this;t.defaultActivities=["Coffee","Vegetarian","Park","Mexican","Art Gallery"],t.activities=ko.observableArray(),t.activityQuery=ko.observable(),e.readyState.subscribe(function(){e.readyState()===!0&&t.displayDefaultActivities()}),t.displayDefaultActivities=function(){t.passReferenceToLocationsVm(),_.each(t.defaultActivities,function(e){var t=ko.observable(new Activity(e));o.searchLocations(t)})},t.addActivity=function(){var e=ko.observable(new Activity(t.activityQuery()));o.searchLocations(e),t.activityQuery("")},t.passReferenceToLocationsVm=function(){o.getReferenceToActivitiesObject(t.activities)},t.activities.subscribe(function(){t.passReferenceToLocationsVm()}),t.resetInfoWindowWhenSelectedLocationToggledVisible=function(o){return _.each(o.results(),function(t){if(t().selected()===!0)switch(o.checked()){case!1:e.resetInfoWindow();break;case!0:e.infoWindow().open(window.map,t().marker)}}),!0}};window.ActivitiesViewModel=e}(),function(){"use strict";var e=function(){var e=this;e.foursquareService=new foursquareService,e.MapViewModel=new MapViewModel(e.foursquareService),e.LocationsViewModel=new LocationsViewModel(e.MapViewModel,e.foursquareService),e.ActivitiesViewModel=new ActivitiesViewModel(e.MapViewModel,e.LocationsViewModel)};window.AppViewModel=e}(),function(){"use strict";function e(e){var t,i,n,a;_.each(e,function(e){var s="#overlay-"+e;t=$("<div>"),i="./build/components/"+e+"/"+e+".html",n="#"+e,t.load(i,n,function(){a=$(this).prop("outerHTML"),$(s).append(a),ko.applyBindings(o,document.getElementById(e))})})}var o=new AppViewModel;e(["searchbar","sidebar"]),$(document).ready(function(){$("#overlay-searchbar").draggable(),$("#overlay-sidebar").draggable(),$(document).on("click","#toggle-minimize-sidebar",function(){$(this).parent().toggleClass("show")})})}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFjdGl2aXRpZXMvYWN0aXZpdHkuY29uc3RydWN0b3IuanMiLCJsb2NhdGlvbnMvbG9jYXRpb24uY29uc3RydWN0b3IuanMiLCJtYXAudmlld21vZGVsLmpzIiwiZm91cnNxdWFyZS5zZXJ2aWNlLmpzIiwibG9jYXRpb25zLnZpZXdtb2RlbC5qcyIsImFjdGl2aXRpZXMudmlld21vZGVsLmpzIiwiYXBwLnZpZXdtb2RlbC5qcyIsImFwcC5pbml0LmpzIl0sIm5hbWVzIjpbIkFjdGl2aXR5IiwiYWN0aXZpdHlRdWVyeSIsInRoaXMiLCJ0aXRsZSIsInJlc3VsdHMiLCJrbyIsIm9ic2VydmFibGVBcnJheSIsInZpc2libGUiLCJvYnNlcnZhYmxlIiwiY2hlY2tlZCIsImhhc0ZpbHRlclJlc3VsdHMiLCJwcm90b3R5cGUiLCJ0b2dnbGVNYXJrZXJzVmlzaWJsZSIsInNlbGYiLCJ0b2dnbGVDaGVja2VkIiwibGVuZ3RoIiwiZmlyc3RMb2NhdGlvbiIsIl8iLCJoZWFkIiwibWFya2VyIiwiZ2V0TWFwIiwibWFwUmVmZXJlbmNlIiwiZWFjaCIsImxvY2F0aW9uIiwic2V0TWFwIiwid2luZG93IiwiTG9jYXRpb24iLCJkYXRhIiwibmFtZSIsInNlbGVjdGVkIiwicGxhY2VfaWQiLCJmb3JtYXR0ZWRfYWRkcmVzcyIsImdlb21ldHJ5IiwidHlwZXMiLCJmb3Vyc3F1YXJlUXVlcnlVcmwiLCJjaGVja2lucyIsImNvbnRhaW5zIiwic3RyIiwiY2FzZVNlbnNpdGl2ZSIsImluY2x1ZGVzIiwidG9Mb3dlckNhc2UiLCJpbmRleE9mIiwic2hvcnRMYXRMbmciLCJNYXRoIiwicm91bmQiLCJsYXQiLCJsbmciLCJnZXRDb2xvciIsIk1hcFZpZXdNb2RlbCIsImZvdXJzcXVhcmVTZXJ2aWNlIiwidm0iLCJtYXAiLCJnZW9jb2RlciIsImluZm9XaW5kb3ciLCJyZWFkeVN0YXRlIiwibG9uZ0JlYWNoQ0EiLCJzZWFyY2hTdHIiLCJjZW50ZXIiLCJnZW9sb2NhdGlvbk5hbWUiLCJjYWNoZWRnZW9sb2NhdGlvbk5hbWUiLCJjdXJyZW50R2VvbG9jYXRpb24iLCJsb2NhdGlvbnNWbSIsInNlbGVjdGVkTG9jYXRpb24iLCJ1cGRhdGVHZW9sb2NhdGlvbiIsInRyaW0iLCJnZW8iLCJpbml0TWFwIiwiZ29vZ2xlIiwibWFwcyIsIk1hcCIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJ6b29tIiwibWFwVHlwZUlkIiwiTWFwVHlwZUlkIiwiVEVSUkFJTiIsImNvbnNvbGUiLCJsb2ciLCJHZW9jb2RlciIsImluaXRJbmZvV2luZG93IiwicGxhY2VzU2VydmljZSIsInBsYWNlcyIsIlBsYWNlc1NlcnZpY2UiLCJldmVudCIsImFkZExpc3RlbmVyT25jZSIsImFsZXJ0IiwiZ2VvY29kZSIsImFkZHJlc3MiLCJzdGF0dXMiLCJHZW9jb2RlclN0YXR1cyIsIk9LIiwic2V0Q2VudGVyIiwiSW5mb1dpbmRvdyIsIiQiLCJhamF4IiwiZG9uZSIsInRlbXBsYXRlIiwic2V0Q29udGVudCIsIm9wZW4iLCJrb0JvdW5kIiwiYWRkTGlzdGVuZXIiLCJhcHBseUJpbmRpbmdzIiwicmVzZXRJbmZvV2luZG93IiwiY2VudGVyTWFwQXQiLCJsYXRMbmciLCJMYXRMbmciLCJwYW5UbyIsImFkZE1hcmtlciIsImFjdGl2aXR5IiwiY29sb3IiLCJ2aXNpYmxlU3RhdGUiLCJNYXJrZXIiLCJpY29uIiwicG9zaXRpb24iLCJpZCIsImFuaW1hdGlvbiIsIkFuaW1hdGlvbiIsIkRST1AiLCJtYXJrZXJDb3B5Iiwic2VsZWN0TG9jYXRpb24iLCJzaG93SW5mb1dpbmRvdyIsImJvdW5jZUFuaW1hdGUiLCJzaG93TWFya2Vyc0ZvclZpc2libGVBY3Rpdml0aWVzIiwiYWN0aXZpdGllcyIsInNob3dNYXJrZXIiLCJoaWRlTWFya2VyIiwiZHJvcEFuaW1hdGUiLCJzZXRBbmltYXRpb24iLCJCT1VOQ0UiLCJzZXRUaW1lb3V0IiwiZm91cnNxdWFyZSIsIm1ha2VRdWVyeVVybCIsImJhc2VVcmwiLCJjbGllbnRJZCIsImNsaWVudFNlY3JldCIsInZlcnNpb24iLCJxdWVyeSIsInNwbGl0Iiwiam9pbiIsImxpbWl0IiwiZ2V0Q2hlY2tpbnNDb3VudEZvciIsImNhbGxiYWNrIiwiY29tcHV0ZWQiLCJnZXRKU09OIiwidGhlbiIsInJlcyIsInJlc3BvbnNlIiwidmVudWVzIiwibG9jYXRpb25DaGVja2lucyIsInN0YXRzIiwiY2hlY2tpbnNDb3VudCIsImZhaWwiLCJMb2NhdGlvbnNWaWV3TW9kZWwiLCJtYXBWbSIsImZpbHRlclF1ZXJ5Iiwic2VhcmNoTG9jYXRpb25zIiwiUGxhY2VzU2VydmljZVN0YXR1cyIsImluQm91bmRMb2NhdGlvbnMiLCJzdXBwcmVzc091dE9mQm91bmRzTG9jYXRpb25zIiwibG9jYXRpb25EYXRhIiwibG9jIiwicmVxdWVzdEZvdXJzcXVhcmVEYXRhIiwicHVzaCIsIm5vUmVzdWx0c0Zvckxhc3RHZW9sb2NhdGlvbiIsImxvY2F0aW9ucyIsImxvY0xhdCIsImxvY0xuZyIsIm1hcEJvdW5kcyIsIkgiLCJqIiwiZ2V0Qm91bmRzIiwidGV4dFNlYXJjaCIsImJvdW5kcyIsInN1YnNjcmliZSIsImZpbHRlclJlc3VsdHMiLCJhY3Rpdml0eVZpc2liaWxpdHlEdXJpbmdGaWx0ZXIiLCJzb21lIiwiZmlsdGVySW5wdXRJc0VtcHR5IiwidW5maWx0ZXJSZXN1bHRzIiwicmVzZXRJbml0aWFsVmlzaWJpbGl0eSIsInByZXZlbnREZWZhdWx0IiwiY29weSIsImNsZWFyQ3VycmVudFNlbGVjdGlvbnMiLCJhc3NpZ25Db2xvcnNUb0xvY2F0aW9ucyIsImdldFJlZmVyZW5jZVRvQWN0aXZpdGllc09iamVjdCIsInBhc3NTZWxmVG9NYXBWbSIsInBhc3NTZWxlY3RlZExvY2F0aW9uVG9NYXBWbSIsIkFjdGl2aXRpZXNWaWV3TW9kZWwiLCJkZWZhdWx0QWN0aXZpdGllcyIsImRpc3BsYXlEZWZhdWx0QWN0aXZpdGllcyIsInBhc3NSZWZlcmVuY2VUb0xvY2F0aW9uc1ZtIiwiYWN0aXZpdHlOYW1lIiwiYWRkQWN0aXZpdHkiLCJyZXNldEluZm9XaW5kb3dXaGVuU2VsZWN0ZWRMb2NhdGlvblRvZ2dsZWRWaXNpYmxlIiwiQXBwVmlld01vZGVsIiwiZGlzcGxheUNvbXBvbmVudHMiLCJjb21wb25lbnRzIiwiJGNvbXBvbmVudCIsInRlbXBsYXRlVXJsIiwiaHRtbCIsImNvbXBvbmVudCIsImNvbnRhaW5lciIsImxvYWQiLCJwcm9wIiwiYXBwZW5kIiwiYXBwIiwicmVhZHkiLCJkcmFnZ2FibGUiLCJvbiIsInBhcmVudCIsInRvZ2dsZUNsYXNzIl0sIm1hcHBpbmdzIjoiQ0FDQSxXQUVBLFlBRUEsSUFBQUEsR0FBQSxTQUFBQyxHQUVBQyxLQUFBQyxNQUFBRixFQUNBQyxLQUFBRSxRQUFBQyxHQUFBQyxrQkFDQUosS0FBQUssUUFBQUYsR0FBQUcsWUFBQSxHQUdBTixLQUFBTyxRQUFBSixHQUFBRyxZQUFBLEdBR0FOLEtBQUFRLGlCQUFBTCxHQUFBRyxhQUdBUixHQUFBVyxVQUFBQyxxQkFBQSxXQUVBLEdBQUFDLEdBQUFYLElBR0EsSUFGQVcsRUFBQUMsZ0JBRUFELEVBQUFULFVBQUFXLE9BQUEsRUFBQSxDQUVBLEdBQUFDLEdBQUFDLEVBQUFDLEtBQUFMLEVBQUFULFVBQ0EsUUFBQVksSUFBQUcsT0FBQUMsV0FDQVAsRUFBQVEsYUFBQUwsSUFBQUcsT0FBQUMsVUFHQUgsRUFBQUssS0FBQVQsRUFBQVQsVUFBQSxTQUFBbUIsR0FDQSxPQUFBQSxJQUFBSixPQUFBQyxTQUNBRyxJQUFBSixPQUFBSyxPQUFBWCxFQUFBUSxjQUdBRSxJQUFBSixPQUFBSyxPQUFBLFFBSUEsT0FBQSxHQUdBeEIsRUFBQVcsVUFBQUcsY0FBQSxXQUNBLEdBQUFELEdBQUFYLElBRUEsT0FEQVcsR0FBQUosU0FBQUksRUFBQUosWUFDQSxHQUtBZ0IsT0FBQXpCLFNBQUFBLEtDakRBLFdBRUEsWUFFQSxJQUFBMEIsR0FBQSxTQUFBQyxHQUVBekIsS0FBQTBCLEtBQUF2QixHQUFBRyxXQUFBbUIsRUFBQUMsTUFDQTFCLEtBQUFLLFFBQUFGLEdBQUFH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QUEsSUFBQXNGLEVBRUFILEVBQUFLLEtBQUFKLEVBQUFwRixFQUFBLFdBQ0FxRixFQUFBMUcsRUFBQTNGLE1BQUF5TSxLQUFBLGFBQ0E5RyxFQUFBNEcsR0FBQUcsT0FBQUwsR0FFQWxNLEdBQUFnRyxjQUFBd0csRUFBQXZJLFNBQUFDLGVBQUFpSSxRQTFCQSxHQUFBSyxHQUFBLEdBQUFYLGFBTUFDLElBQUEsWUFBQSxZQThCQXRHLEVBQUF2QixVQUFBd0ksTUFDQSxXQUVBakgsRUFBQSxzQkFBQWtILFlBQ0FsSCxFQUFBLG9CQUFBa0gsWUFFQWxILEVBQUF2QixVQUFBMEksR0FBQSxRQUFBLDJCQUFBLFdBQ0FuSCxFQUFBM0YsTUFBQStNLFNBQUFDLFlBQUEiLCJmaWxlIjoiYXBwLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbihmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBBY3Rpdml0eSA9IGZ1bmN0aW9uIEFjdGl2aXR5KGFjdGl2aXR5UXVlcnkpIHtcclxuXHJcbiAgICAgICAgdGhpcy50aXRsZSA9IGFjdGl2aXR5UXVlcnk7XHJcbiAgICAgICAgdGhpcy5yZXN1bHRzID0ga28ub2JzZXJ2YWJsZUFycmF5KCk7XHJcbiAgICAgICAgdGhpcy52aXNpYmxlID0ga28ub2JzZXJ2YWJsZSh0cnVlKTtcclxuXHJcbiAgICAgICAgLy8gV2UgdXNlIGBjaGVja2VkYCB0byBkZXRlcm1pbmUgaWYgYW4gYWN0aXZpdHkgd2FzIGluaXRpYWxseSB2aXNpYmxlIHdoZW4gcHJpb3IgdG8gYXBwbHlpbmcgdGhlIGZpbHRlciBxdWVyeS5cclxuICAgICAgICB0aGlzLmNoZWNrZWQgPSBrby5vYnNlcnZhYmxlKHRydWUpO1xyXG5cclxuICAgICAgICAvLyBXZSB1c2UgYGhhc0ZpbHRlclJlc3VsdHNgIHRvIGRldGVybWluZSBpZiB0aGUgYWN0aXZpdHkgY2hlY2tib3ggc2hvdWxkIGJlIGRpc2FibGVkLlxyXG4gICAgICAgIHRoaXMuaGFzRmlsdGVyUmVzdWx0cyA9IGtvLm9ic2VydmFibGUoKTtcclxuICAgIH07XHJcblxyXG4gICAgQWN0aXZpdHkucHJvdG90eXBlLnRvZ2dsZU1hcmtlcnNWaXNpYmxlID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgc2VsZi50b2dnbGVDaGVja2VkKCk7XHJcblxyXG4gICAgICAgIGlmIChzZWxmLnJlc3VsdHMoKS5sZW5ndGggPiAwKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgZmlyc3RMb2NhdGlvbiA9IF8uaGVhZChzZWxmLnJlc3VsdHMoKSk7XHJcbiAgICAgICAgICAgIGlmICggZmlyc3RMb2NhdGlvbigpLm1hcmtlci5nZXRNYXAoKSAhPT0gbnVsbCkge1xyXG4gICAgICAgICAgICAgICAgc2VsZi5tYXBSZWZlcmVuY2UgPSBmaXJzdExvY2F0aW9uKCkubWFya2VyLmdldE1hcCgpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBfLmVhY2goc2VsZi5yZXN1bHRzKCksIGZ1bmN0aW9uIChsb2NhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGxvY2F0aW9uKCkubWFya2VyLmdldE1hcCgpID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24oKS5tYXJrZXIuc2V0TWFwKHNlbGYubWFwUmVmZXJlbmNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uKCkubWFya2VyLnNldE1hcChudWxsKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfTtcclxuXHJcbiAgICBBY3Rpdml0eS5wcm90b3R5cGUudG9nZ2xlQ2hlY2tlZCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgc2VsZiA9IHRoaXM7XHJcbiAgICAgICAgc2VsZi5jaGVja2VkKCAhKHNlbGYuY2hlY2tlZCgpKSk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9O1xyXG5cclxuXHJcblxyXG4gICAgd2luZG93LkFjdGl2aXR5ID0gQWN0aXZpdHk7XHJcblxyXG59KSgpO1xyXG5cclxuXHJcbiIsIlxyXG4oZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgTG9jYXRpb24gPSBmdW5jdGlvbiBMb2NhdGlvbihkYXRhKSB7XHJcblxyXG4gICAgICAgIHRoaXMubmFtZSA9IGtvLm9ic2VydmFibGUoZGF0YS5uYW1lKTtcclxuICAgICAgICB0aGlzLnZpc2libGUgPSBrby5vYnNlcnZhYmxlKHRydWUpO1xyXG4gICAgICAgIHRoaXMuc2VsZWN0ZWQgPSBrby5vYnNlcnZhYmxlKGZhbHNlKTtcclxuICAgICAgICB0aGlzLnBsYWNlX2lkID0ga28ub2JzZXJ2YWJsZShkYXRhLnBsYWNlX2lkKTtcclxuICAgICAgICB0aGlzLmZvcm1hdHRlZF9hZGRyZXNzID0ga28ub2JzZXJ2YWJsZShkYXRhLmZvcm1hdHRlZF9hZGRyZXNzKTtcclxuICAgICAgICB0aGlzLmdlb21ldHJ5ID0ga28ub2JzZXJ2YWJsZShkYXRhLmdlb21ldHJ5KTtcclxuICAgICAgICB0aGlzLnR5cGVzID0ga28ub2JzZXJ2YWJsZUFycmF5KGRhdGEudHlwZXMpO1xyXG4gICAgICAgIHRoaXMubWFya2VyID0gbnVsbDtcclxuXHJcbiAgICAgICAgdGhpcy5mb3Vyc3F1YXJlUXVlcnlVcmwgPSBrby5vYnNlcnZhYmxlKCcnKTtcclxuXHJcbiAgICAgICAgdGhpcy5jaGVja2lucyA9IGtvLm9ic2VydmFibGUoKTtcclxuICAgIH07XHJcblxyXG4vLyBUT0RPOiBBbHNvIHNlYXJjaCBmb3IgYHN0cmAgd2l0aGluIGBMb2NhdGlvbi50eXBlc2AuXHJcbiAgICBMb2NhdGlvbi5wcm90b3R5cGUuY29udGFpbnMgPSBmdW5jdGlvbiAoc3RyLCBjYXNlU2Vuc2l0aXZlKSB7XHJcbiAgICAgICAgaWYgKGNhc2VTZW5zaXRpdmUgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmFtZSgpLmluY2x1ZGVzKHN0cik7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMubmFtZSgpLnRvTG93ZXJDYXNlKCkuaW5kZXhPZihzdHIudG9Mb3dlckNhc2UoKSkgPiAtMTtcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIExvY2F0aW9uLnByb3RvdHlwZS5zaG9ydExhdExuZyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICByZXR1cm4gKE1hdGgucm91bmQodGhpcy5nZW9tZXRyeSgpLmxvY2F0aW9uLmxhdCgpICogMTAwMCkgLyAxMDAwKSArICcsJyArXHJcbiAgICAgICAgICAgICAgICAoTWF0aC5yb3VuZCh0aGlzLmdlb21ldHJ5KCkubG9jYXRpb24ubG5nKCkgKiAxMDAwKSAvIDEwMDApO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBJIGtub3cgdGhpcyBzd2l0Y2ggaXMgdGVycmlibGUsIGJ1dCBJIHVzZWQgaW4gcGxhY2Ugb2YgYSBmb3JtdWxhIGJlY2F1c2UgSSB3YW50ZWQgdG8gYmUgYWJsZSB0byBlYXNpbHkgdHdlYWsgdGhlXHJcbiAgICAvLyB0aHJlc2hvbGRzICh0aGVzZSBhcmUgYXJiaXRyYXJ5KSB3aGVyZSBkaWZmZXJlbnQgbWFya2VyIGNvbG9ycyBhcmUgdXNlZC5cclxuICAgIExvY2F0aW9uLnByb3RvdHlwZS5nZXRDb2xvciA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICB2YXIgY2hlY2tpbnMgPSB0aGlzLmNoZWNraW5zKCk7XHJcbiAgICAgICAgc3dpdGNoICh0cnVlKSB7XHJcbiAgICAgICAgICAgIGNhc2UgKGNoZWNraW5zID4gMTAwMCk6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJzEnO1xyXG4gICAgICAgICAgICBjYXNlIChjaGVja2lucyA+IDYwMCk6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJzInO1xyXG4gICAgICAgICAgICBjYXNlIChjaGVja2lucyA+IDM1MCk6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJzMnO1xyXG4gICAgICAgICAgICBjYXNlIChjaGVja2lucyA+IDEyMCk6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJzQnO1xyXG4gICAgICAgICAgICBjYXNlIChjaGVja2lucyA+IDYwKTpcclxuICAgICAgICAgICAgICAgIHJldHVybiAnNSc7XHJcbiAgICAgICAgICAgIGNhc2UgKGNoZWNraW5zID4gMzApOlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICc2JztcclxuICAgICAgICAgICAgY2FzZSAoY2hlY2tpbnMgPiAxNik6XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gJzcnO1xyXG4gICAgICAgICAgICBkZWZhdWx0OlxyXG4gICAgICAgICAgICAgICAgcmV0dXJuICc3JztcclxuICAgICAgICB9XHJcbiAgICB9O1xyXG5cclxuICAgIHdpbmRvdy5Mb2NhdGlvbiA9IExvY2F0aW9uO1xyXG5cclxufSkoKTtcclxuIiwiXHJcbihmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIHZhciBNYXBWaWV3TW9kZWwgPSBmdW5jdGlvbihmb3Vyc3F1YXJlU2VydmljZSkge1xyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiBUb3AtbGV2ZWwgdmFyaWFibGVzIGFuZCBwcm9wZXJ0aWVzIGZvciBgTWFwVmlld01vZGVsKClgXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdmFyIHZtID0gdGhpcztcclxuXHJcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBgbWFwYCwgYGluZm9XaW5kb3dgLCBhbmQgYGdlb2NvZGVyYCB2YXJpYWJsZXMgd2hpY2ggYXJlIG5lZWRlZCBpbiBvdXIgYGluaXRNYXAoKWAgY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAgICAgICAgd2luZG93Lm1hcCA9IG51bGw7XHJcbiAgICAgICAgdmFyIGdlb2NvZGVyO1xyXG5cclxuICAgICAgICAvLyBJbml0aWFsaXplIGVtcHR5IHByb3BlcnR5IHRvIGhvbGQgdGhlIG1hcmtlciBpbmZvIHdpbmRvdy5cclxuICAgICAgICB2bS5pbmZvV2luZG93ID0ga28ub2JzZXJ2YWJsZSgpO1xyXG5cclxuICAgICAgICAvLyBgcmVhZHlTdGF0ZWAgaXMgc2V0IHRvIGB0cnVlYCBpbnNpZGUgdGhlIGBpbml0TWFwKClgIGZ1bmN0aW9uIG9ubHkgd2hlbiB0aGUgbWFwIGlzIGluIGBpZGxlYCBzdGF0ZSAoaW5kaWNhdGluZ1xyXG4gICAgICAgIC8vIHRoYXQgaXQgaGFzIHN1Y2Nlc3NmdWxseSBsb2FkZWQpLCBhbmQgYWxzbyBvbmNlIEdvb2dsZSBQbGFjZXMgU2VydmljZSBpcyBpbml0aWFsaXplZC4gYEFjdGl2aXRpZXNWaWV3TW9kZWxgXHJcbiAgICAgICAgLy8gbGlzdGVucyBmb3IgYSBjaGFuZ2UgdG8gYHJlYWR5U3RhdGVgIGluIG9yZGVyIHRvIGV4ZWN1dGUgdGhlIGRlZmF1bHQgYWN0aXZpdGllcyBHb29nbGUgUGxhY2VzIHF1ZXJ5IChvdGhlcndpc2VcclxuICAgICAgICAvLyB0aGUgc2VhcmNoIGV4ZWN1dGVzIGJlZm9yZSB0aGUgbWFwIGFuZCBQbGFjZXMgU2VydmljZSBhcmUgZnVsbHkgaW5pdGlhbGl6ZWQgJiB3ZSdsbCBzZWUgZXJyb3JzKS5cclxuICAgICAgICB2bS5yZWFkeVN0YXRlID0ga28ub2JzZXJ2YWJsZShmYWxzZSk7XHJcblxyXG4gICAgICAgIC8vIERlZmF1bHQgbG9jYXRpb25cclxuICAgICAgICB2YXIgbG9uZ0JlYWNoQ0EgPSB7XHJcbiAgICAgICAgICAgIHNlYXJjaFN0cjogJ0xvbmcgQmVhY2gsIENBJyxcclxuICAgICAgICAgICAgY2VudGVyOiB7bGF0OiAzMy43NzAsIGxuZzogLTExOC4xOTR9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBgZ2VvbG9jYXRpb25OYW1lYCBvYnNlcnZhYmxlIHdpdGggYSBkZWZhdWx0IGxvY2F0aW9uIHRleHQgdG8gYXBwZWFyIGluIHRoZSBsb2NhdGlvbiBzZWFyY2ggaW5wdXQuXHJcbiAgICAgICAgdm0uZ2VvbG9jYXRpb25OYW1lID0ga28ub2JzZXJ2YWJsZShsb25nQmVhY2hDQS5zZWFyY2hTdHIpO1xyXG4gICAgICAgIHZtLmNhY2hlZGdlb2xvY2F0aW9uTmFtZSA9IGtvLm9ic2VydmFibGUobG9uZ0JlYWNoQ0Euc2VhcmNoU3RyKTtcclxuXHJcbiAgICAgICAgLy8gSW5pdGlhbGl6ZSBhbiBlbXB0eSBrby5vYnNlcnZhYmxlIG9iamVjdCB0byBzdG9yZSB0aGUgY3VycmVudCBsb2NhdGlvbi5cclxuICAgICAgICB2bS5jdXJyZW50R2VvbG9jYXRpb24gPSBrby5vYnNlcnZhYmxlKCk7XHJcblxyXG4gICAgICAgIC8vIFdlIHdpbGwgdXNlIGBsb2NhdGlvbnNWbWAgYXMgYSByZWZlcmVuY2UgdG8gYExvY2F0aW9uc1ZpZXdNb2RlbCgpYC4gVGhlc2UgcHJvcGVydGllcyBhcmUgdXNlZCBmb3IgZGF0YVxyXG4gICAgICAgIC8vIGJpbmRpbmcgaW5zaWRlIG9mIGxvY2F0aW9uIGluZm8gd2luZG93cy5cclxuICAgICAgICB2bS5sb2NhdGlvbnNWbSA9IHt9O1xyXG4gICAgICAgIHZtLnNlbGVjdGVkTG9jYXRpb24gPSBrby5vYnNlcnZhYmxlKCk7XHJcblxyXG5cclxuICAgICAgICAvKioqXHJcbiAgICAgICAgICogR29vZ2xlIE1hcHMgQVBJIGNhbGxzXHJcbiAgICAgICAgICovXHJcblxyXG4gICAgICAgIC8vIGB1cGRhdGVHZW9sb2NhdGlvbigpYCBpcyB0aGUgc3VibWl0IGZ1bmN0aW9uIGNhbGxlZCBmcm9tIHRoZSBsb2NhdGlvbiBmb3JtIGluICdzZWFyY2hiYXIuaHRtbC4nXHJcbiAgICAgICAgdm0udXBkYXRlR2VvbG9jYXRpb24gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGlmICh2bS5nZW9sb2NhdGlvbk5hbWUoKS50cmltKCkgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5nZW8odm0uZ2VvbG9jYXRpb25OYW1lKCkpO1xyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgdm0uZ2VvbG9jYXRpb25OYW1lKHZtLmNhY2hlZGdlb2xvY2F0aW9uTmFtZSgpKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIEluaXRpYWxpemUgb3VyIG1hcC4gVGhpcyBpcyB0aGUgY2FsbGJhY2sgZnVuY3Rpb24gcGFyYW1ldGVyIGluIG91ciBHb29nbGUgTWFwcyBBUEkgcmVxdWVzdCBpbiAnaW5kZXguaHRtbCcuXHJcbiAgICAgICAgd2luZG93LmluaXRNYXAgPSBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemUgdGhlIGBtYXBgLlxyXG4gICAgICAgICAgICB3aW5kb3cubWFwID0gbmV3IGdvb2dsZS5tYXBzLk1hcChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwJyksIHtcclxuICAgICAgICAgICAgICAgIHpvb206IDE1LFxyXG4gICAgICAgICAgICAgICAgbWFwVHlwZUlkOiBnb29nbGUubWFwcy5NYXBUeXBlSWQuVEVSUkFJTlxyXG4gICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdHb29nbGUgTWFwcyBBUEkgaGFzIGJlZW4gY2FsbGVkLicpO1xyXG5cclxuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSB0aGUgYGdlb2NvZGVyYC5cclxuICAgICAgICAgICAgZ2VvY29kZXIgPSBuZXcgZ29vZ2xlLm1hcHMuR2VvY29kZXIoKTtcclxuICAgICAgICAgICAgdm0uZ2VvKHZtLmdlb2xvY2F0aW9uTmFtZSgpKTtcclxuXHJcbiAgICAgICAgICAgIC8vIEluaXRpYWxpemUgdGhlIG1hcmtlciBpbmZvIHdpbmRvd3MuXHJcbiAgICAgICAgICAgIHZtLmluaXRJbmZvV2luZG93KCk7XHJcblxyXG4gICAgICAgICAgICAvLyBJbml0aWFsaXplIFBsYWNlcyBTZXJ2aWNlLlxyXG4gICAgICAgICAgICB2bS5wbGFjZXNTZXJ2aWNlID0gbmV3IGdvb2dsZS5tYXBzLnBsYWNlcy5QbGFjZXNTZXJ2aWNlKG1hcCk7XHJcblxyXG4gICAgICAgICAgICBpZiAodm0ucGxhY2VzU2VydmljZSkge1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coJ0dvb2dsZSBQbGFjZXMgc2VydmljZSBoYXMgYmVlbiBpbml0aWFsaXplZC4nKTtcclxuXHJcbiAgICAgICAgICAgICAgICAvLyBTZXQgYHJlYWR5U3RhdGVgIHByb3BlcnR5IHRvIGB0cnVlYCBvbmNlIFBsYWNlcyBTZXJ2aWNlIGlzIGF2YWlsYWJsZSBhbmQgdGhlIG1hcCBoYXMgbG9hZGVkIHN1Y2Nlc3NmdWxseS5cclxuICAgICAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyT25jZShtYXAsICdpZGxlJywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgIGlmIChtYXAuY2VudGVyKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHZtLnJlYWR5U3RhdGUodHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdHb29nbGUgTWFwcyBoYXMgbG9hZGVkIHN1Y2Nlc3NmdWxseS4nKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ1RoZXJlIHdhcyBhIHByb2JsZW0gbG9hZGluZyB0aGUgbWFwLicpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgIGFsZXJ0KCdUaGVyZSB3YXMgYW4gZXJyb3IgaW5pdGlhbGl6aW5nIEdvb2dsZSBQbGFjZXMgc2VydmljZS4nKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICB2bS5nZW8gPSBmdW5jdGlvbiAoZ2VvbG9jYXRpb25OYW1lKSB7XHJcbiAgICAgICAgICAgIGdlb2NvZGVyLmdlb2NvZGUoIHsgJ2FkZHJlc3MnOiBnZW9sb2NhdGlvbk5hbWUgfSwgZnVuY3Rpb24gKHJlc3VsdHMsIHN0YXR1cykge1xyXG4gICAgICAgICAgICAgICAgaWYgKHN0YXR1cyA9PSBnb29nbGUubWFwcy5HZW9jb2RlclN0YXR1cy5PSykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2bS5jYWNoZWRnZW9sb2NhdGlvbk5hbWUoZ2VvbG9jYXRpb25OYW1lKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgbWFwLnNldENlbnRlcihyZXN1bHRzWzBdLmdlb21ldHJ5LmxvY2F0aW9uKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gU3RvcmUgdGhlIHN1Y2Nlc3NmdWxseSBnZW9jb2RlZCBjb29yZGluYXRlcy4gTG9jYXRpb25zVmlld01vZGVsIHN1YnNjcmliZXMgdG8gdGhpcyBwcm9wZXJ0eSBpblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIG9yZGVyIHRvIHNlYXJjaCBmb3IgbmV3IGFjdGl2aXR5IGxvY2F0aW9ucyB3aGVuZXZlciB0aGUgbWFwIGdlb2xvY2F0aW9uIGNoYW5nZXMuXHJcbiAgICAgICAgICAgICAgICAgICAgdm0uY3VycmVudEdlb2xvY2F0aW9uKHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY2VudGVyOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsYXQ6IHJlc3VsdHNbMF0uZ2VvbWV0cnkubG9jYXRpb24ubGF0KCksXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsbmc6IHJlc3VsdHNbMF0uZ2VvbWV0cnkubG9jYXRpb24ubG5nKClcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBSZWxvYWQgbWFya2VyIGluZm8gd2luZG93cyB3aGVuZXZlciB0aGUgZ2VvbG9jYXRpb24gY2hhbmdlcy5cclxuICAgICAgICAgICAgICAgICAgICB2bS5pbml0SW5mb1dpbmRvdygpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygnTG9jYXRpb24gaGFzIGJlZW4gc2V0IHRvOiAnICsgZ2VvbG9jYXRpb25OYW1lKTtcclxuXHJcbiAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZtLmdlb2xvY2F0aW9uTmFtZSh2bS5jYWNoZWRnZW9sb2NhdGlvbk5hbWUoKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgYWxlcnQoXCJHZW9jb2Rpbmcgd2FzIHVuc3VjY2Vzc2Z1bCBmb3IgdGhlIGZvbGxvd2luZyByZWFzb246IFwiICsgc3RhdHVzKTtcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIHZtLmluaXRJbmZvV2luZG93ID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICAgICAgLy8gSW5pdGlhbGl6ZSBpbmZvV2luZG93LCBsb2FkIHRoZSB0ZW1wbGF0ZSBhbmQgYXBwbHkgYmluZGluZ3MuXHJcbiAgICAgICAgICAgIHZtLmluZm9XaW5kb3cobmV3IGdvb2dsZS5tYXBzLkluZm9XaW5kb3coKSk7XHJcblxyXG4gICAgICAgICAgICAkLmFqYXgoJy4vYnVpbGQvY29tcG9uZW50cy9pbmZvd2luZG93L2luZm93aW5kb3cuaHRtbCcpXHJcbiAgICAgICAgICAgICAgICAuZG9uZShmdW5jdGlvbiAodGVtcGxhdGUpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgdm0uaW5mb1dpbmRvdygpLnNldENvbnRlbnQodGVtcGxhdGUpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBPcGVuaW5nIHRoZSBpbmZvIHdpbmRvdyB3aXRoIHRoZSBgbWFwYCBwYXJhbSBzZXQgdG8gYG51bGxgIHN0aWxsIGFsbG93cyB1cyB0byBwZXJmb3JtIGtub2Nrb3V0XHJcbiAgICAgICAgICAgICAgICAgICAgLy8gZGF0YSBiaW5kaW5nIChpZiB3ZSBoYWQgc2V0IHRvIGBtYXBgIHdlIHdvdWxkIHNlZSBhbiBlbXB0eSBpbmZvIHdpbmRvdyBpbiB0aGUgdXBwZXItbGVmdCB3aGVuIHRoZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGFwcCBzdGFydHMpLlxyXG4gICAgICAgICAgICAgICAgICAgIHZtLmluZm9XaW5kb3coKS5vcGVuKG51bGwpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2YXIga29Cb3VuZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgIGdvb2dsZS5tYXBzLmV2ZW50LmFkZExpc3RlbmVyKHZtLmluZm9XaW5kb3coKSwgJ2RvbXJlYWR5JywgZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoa29Cb3VuZCA9PT0gZmFsc2UpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGtvLmFwcGx5QmluZGluZ3Modm0sIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdpbmZvd2luZG93LW92ZXJsYXknKSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBrb0JvdW5kID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAvLyBXaGVuIHRoZSBpbmZvIHdpbmRvdyBpcyBjbGlja2VkIGNsb3NlZCwgd2UgbG9zZSBpdHMga25vY2tvdXQgYmluZGluZy4gV2hlbiB0aGlzIGhhcHBlbnMsIGludm9rZVxyXG4gICAgICAgICAgICAgICAgICAgIC8vIGBpbml0SW5mb1dpbmRvdygpYCBhZ2FpbiB0byBtYWtlIGl0IHdvcmsgdXBvbiByZW9wZW5pbmcuXHJcbiAgICAgICAgICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIodm0uaW5mb1dpbmRvdygpLCAnY2xvc2VjbGljaycsIGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAga29Cb3VuZCA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5pbml0SW5mb1dpbmRvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgLy8gSXQgd291bGQgYmUgbmljZSBpZiB0aGVyZSB3YXMgYW4gYG9uY2xvc2VgIGV2ZW50IGZvciBpbmZvIHdpbmRvd3MuIFNpbmNlIHdlIHNvbWV0aW1lcyBuZWVkIHRvIGNsb3NlIHRoZVxyXG4gICAgICAgIC8vIGluZm8gd2luZG93IHByb2dyYW1tYXRpY2FsbHksIGFzIGlzIHRoZSBjYXNlIHdoZW4gdGhlIHNlbGVjdGVkIGxvY2F0aW9uIGlzIGhpZGRlbiB2aWEgdGhlIGZpbHRlciwgb3Igd2hlblxyXG4gICAgICAgIC8vIHRoZSBhY3Rpdml0eSBjb250YWluaW5nIHRoZSBzZWxlY3RlZCBsb2NhdGlvbiBpcyB1bmNoZWNrZWQsIHdlIG5lZWQgdG8gcmVzZXQgdGhlIGluZm8gd2luZG93IGZvciBrbm9ja291dFxyXG4gICAgICAgIC8vIGJpbmRpbmdzIHRvIHdvcmsgcHJvcGVybHkuXHJcbiAgICAgICAgdm0ucmVzZXRJbmZvV2luZG93ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2bS5pbmZvV2luZG93KCkub3BlbihudWxsKTsgLy8gaGFjay4gaW5mb1dpbmRvdy5jbG9zZSgpIHdhcyBub3Qgd29ya2luZyBmb3IgbWUgaGVyZS5cclxuICAgICAgICAgICAgdm0uaW5pdEluZm9XaW5kb3coKTtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogIE1hcCBvcmllbnRhdGlvbiBtZXRob2RzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uY2VudGVyTWFwQXQgPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcclxuICAgICAgICAgICAgdmFyIGxhdExuZyA9IG5ldyBnb29nbGUubWFwcy5MYXRMbmcobG9jYXRpb24uZ2VvbWV0cnkoKS5sb2NhdGlvbi5sYXQoKSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24uZ2VvbWV0cnkoKS5sb2NhdGlvbi5sbmcoKSk7XHJcbiAgICAgICAgICAgIG1hcC5wYW5UbyhsYXRMbmcpO1xyXG4gICAgICAgIH07XHJcblxyXG5cclxuXHJcbiAgICAgICAgLy8gVE9ETzogaW5mbyB3aW5kb3cga28gYmluZGluZyBpcyBsb3N0IGlmIGluZm8gd2luZG93IGlzIGNsb3NlZC5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAgTWFwIG1hcmtlciBtZXRob2RzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgLy8gQ2hhbmdpbmcgY29sb3Igb2YgdGhlIG1hcmtlcnMgYmFzZWQgb24gZm91cnNxdWFyZSBjaGVja2lucyB3YXMgYSBiaXQgb2YgYW4gYWZ0ZXJ0aG91Z2h0LiBSYXRoZXIgdGhhblxyXG4gICAgICAgIC8vIG92ZXJoYXVsIG15IGNvZGUsIEkgb3B0ZWQgdG8gZ2V0IGEgbGl0dGxlIG1lc3N5IHdpdGggcGFzc2luZyB0b28gbWFueSBwYXJhbWV0ZXJzICYgY2FsbGJhY2sgZnVuY3Rpb24gaW5cclxuICAgICAgICAvLyBvcmRlciB0byBtYWtlIHRoaXMgd29yay4gU29ycnkgaXQncyBhIGhhY2t5ISFcclxuICAgICAgICB2bS5hZGRNYXJrZXIgPSBmdW5jdGlvbiAobG9jYXRpb24sIGFjdGl2aXR5LCBjb2xvcikge1xyXG5cclxuICAgICAgICAgICAgdmFyIHZpc2libGVTdGF0ZSA9IGFjdGl2aXR5KCkudmlzaWJsZSgpID8gbWFwIDogbnVsbDtcclxuXHJcbiAgICAgICAgICAgIHZhciBtYXJrZXIgPSBuZXcgZ29vZ2xlLm1hcHMuTWFya2VyKHtcclxuICAgICAgICAgICAgICAgIG1hcDogdmlzaWJsZVN0YXRlLFxyXG4gICAgICAgICAgICAgICAgdGl0bGU6IGxvY2F0aW9uKCkubmFtZSgpLFxyXG4gICAgICAgICAgICAgICAgaWNvbjogJ2J1aWxkL2ltYWdlcy9tYXJrZXJzL21hcmtlcl8nICsgY29sb3IgKyAnLnBuZycsXHJcbiAgICAgICAgICAgICAgICBwb3NpdGlvbjogbG9jYXRpb24oKS5nZW9tZXRyeSgpLmxvY2F0aW9uLFxyXG4gICAgICAgICAgICAgICAgaWQ6IGxvY2F0aW9uKCkucGxhY2VfaWQoKSxcclxuICAgICAgICAgICAgICAgIGFuaW1hdGlvbjogZ29vZ2xlLm1hcHMuQW5pbWF0aW9uLkRST1B9KTtcclxuXHJcbiAgICAgICAgICAgIChmdW5jdGlvbiAobWFya2VyQ29weSkge1xyXG4gICAgICAgICAgICAgICAgZ29vZ2xlLm1hcHMuZXZlbnQuYWRkTGlzdGVuZXIobWFya2VyQ29weSwgJ2NsaWNrJywgZnVuY3Rpb24oKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZtLmxvY2F0aW9uc1ZtLnNlbGVjdExvY2F0aW9uKGxvY2F0aW9uKCkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB2bS5zaG93SW5mb1dpbmRvdyhsb2NhdGlvbigpKTtcclxuICAgICAgICAgICAgICAgICAgICB2bS5ib3VuY2VBbmltYXRlKHRoaXMpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pKG1hcmtlcik7XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gbWFya2VyO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLnNob3dJbmZvV2luZG93ID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XHJcbiAgICAgICAgICAgIHZtLmluZm9XaW5kb3coKS5vcGVuKG1hcCwgbG9jYXRpb24ubWFya2VyKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5zaG93TWFya2Vyc0ZvclZpc2libGVBY3Rpdml0aWVzID0gZnVuY3Rpb24gKGFjdGl2aXRpZXMpIHtcclxuICAgICAgICAgICAgXy5lYWNoKGFjdGl2aXRpZXMoKSwgZnVuY3Rpb24oYWN0aXZpdHkpIHtcclxuICAgICAgICAgICAgICAgIGlmIChhY3Rpdml0eSgpLnZpc2libGUoKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIF8uZWFjaChhY3Rpdml0eSgpLnJlc3VsdHMoKSwgZnVuY3Rpb24obG9jYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdm0uc2hvd01hcmtlcihsb2NhdGlvbik7XHJcbiAgICAgICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmhpZGVNYXJrZXIgPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcclxuICAgICAgICAgICAgbG9jYXRpb24oKS5tYXJrZXIuc2V0TWFwKG51bGwpO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIC8vIFRPRE86IGluZm8gd2luZG93cyBub3Qgd29ya2luZyBhZnRlciBmaWx0ZXIgcGVyZm9ybWVkLiBJIHRoaW5rIHRoaXMgbWF5IGhhcHBlbiB3aGVuIGluZm8gd2luZG93IGlzIG9wZW4gJiBnZXRzIGhpZGRlbiBkdXJpbmcgZmlsdGVyLlxyXG4gICAgICAgIHZtLnNob3dNYXJrZXIgPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcclxuICAgICAgICAgICAgLy8gT25seSBkaXNwbGF5IHRoZSBtYXJrZXIgaWYgaXQgaXMgbm90IGFscmVhZHkgdmlzaWJsZS5cclxuICAgICAgICAgICAgaWYgKGxvY2F0aW9uKCkubWFya2VyLmdldE1hcCgpICE9IG1hcCkge1xyXG4gICAgICAgICAgICAgICAgdm0uZHJvcEFuaW1hdGUobG9jYXRpb24oKS5tYXJrZXIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uZHJvcEFuaW1hdGUgPSBmdW5jdGlvbiAobWFya2VyKSB7XHJcbiAgICAgICAgICAgIG1hcmtlci5zZXRNYXAobWFwKTtcclxuICAgICAgICAgICAgbWFya2VyLnNldEFuaW1hdGlvbihnb29nbGUubWFwcy5BbmltYXRpb24uRFJPUCk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uYm91bmNlQW5pbWF0ZSA9IGZ1bmN0aW9uIChtYXJrZXIpIHtcclxuICAgICAgICAgICAgbWFya2VyLnNldEFuaW1hdGlvbihnb29nbGUubWFwcy5BbmltYXRpb24uQk9VTkNFKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFR1cm4gb2ZmIGFuaW1hdGlvbiBhZnRlciBzaG9ydCB0aW1lLlxyXG4gICAgICAgICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgIG1hcmtlci5zZXRBbmltYXRpb24obnVsbCk7XHJcbiAgICAgICAgICAgIH0sIDIxMjUpO1xyXG4gICAgICAgIH07XHJcbiAgICB9O1xyXG5cclxuICAgIHdpbmRvdy5NYXBWaWV3TW9kZWwgPSBNYXBWaWV3TW9kZWw7XHJcblxyXG59KSgpO1xyXG4iLCIoZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICB2YXIgZm91cnNxdWFyZVNlcnZpY2UgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgIHZhciBmb3Vyc3F1YXJlID0gdGhpcztcclxuXHJcblxyXG4gICAgICAgIGZvdXJzcXVhcmUubWFrZVF1ZXJ5VXJsID0gZnVuY3Rpb24gKGxvY2F0aW9uKSB7XHJcblxyXG4gICAgICAgICAgICAvLyBwZXIgQVBJIGRvY3MsICcvc2VhcmNoJyBpcyBwcm9iYWJseSBiZXR0ZXIgZm9yIGZpbmRpbmcgc3BlY2lmaWMgbG9jYXRpb24sIHdoZXJlYXMgJy9leHBsb3JlJyBtaWdodCBiZSB1c2VkIHRvXHJcbiAgICAgICAgICAgIC8vIGZpbmQgbW9zdCBwb3B1bGFyIGxvY2F0aW9ucyBvZiBhIGNhdGVnb3J5IGluIGEgZ2l2ZW4gYXJlYS5cclxuICAgICAgICAgICAgdmFyIGJhc2VVcmwgPSAnaHR0cHM6Ly9hcGkuZm91cnNxdWFyZS5jb20vdjIvdmVudWVzL3NlYXJjaCcsXHJcblxyXG4gICAgICAgICAgICAvLyBUT0RPOiByZW1vdmUgY2xpZW50SWQuXHJcbiAgICAgICAgICAgICAgICBjbGllbnRJZCA9ICc/Y2xpZW50X2lkPVBVWEJKQ1A0QjRIQjJLSURJR1FQSFhFQkFLV1pQWk80SE9XSlpBSlQ0NU1PWVdETycsXHJcblxyXG4gICAgICAgICAgICAvLyBUT0RPOiByZW1vdmUgY2xpZW50U2VjcmV0LlxyXG4gICAgICAgICAgICAgICAgY2xpZW50U2VjcmV0ID0gJyZjbGllbnRfc2VjcmV0PUQzTkZBM1BUNU5DNTQ0MEU1U0pFT0JKWVlETjFCWTIwQUFTR1hHRjAxMkY1WTFORCcsXHJcbiAgICAgICAgICAgICAgICB2ZXJzaW9uID0gJyZ2PTIwMTMwODE1JyxcclxuICAgICAgICAgICAgICAgIGxhdExuZyA9ICcmbGw9JyArIGxvY2F0aW9uKCkuc2hvcnRMYXRMbmcoKSxcclxuICAgICAgICAgICAgICAgIHF1ZXJ5ID0gJyZxdWVyeT0nICsgbG9jYXRpb24oKS5uYW1lKCkuc3BsaXQoJyAnKS5qb2luKCclMjAnKSxcclxuICAgICAgICAgICAgICAgIGxpbWl0ID0gJyZsaW1pdD0xJztcclxuXHJcblxyXG4gICAgICAgICAgICBsb2NhdGlvbigpLmZvdXJzcXVhcmVRdWVyeVVybCggIGJhc2VVcmwgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNsaWVudElkICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjbGllbnRTZWNyZXQgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZlcnNpb24gK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxhdExuZyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcXVlcnkgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxpbWl0KTtcclxuXHJcbiAgICAgICAgfTtcclxuXHJcblxyXG4gICAgICAgIGZvdXJzcXVhcmUuZ2V0Q2hlY2tpbnNDb3VudEZvciA9IGZ1bmN0aW9uIChsb2NhdGlvbiwgYWN0aXZpdHksIGNhbGxiYWNrKSB7XHJcblxyXG4gICAgICAgICAgICBrby5jb21wdXRlZChmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgJC5nZXRKU09OKGxvY2F0aW9uKCkuZm91cnNxdWFyZVF1ZXJ5VXJsKCkpXHJcbiAgICAgICAgICAgICAgICAgICAgLnRoZW4oZnVuY3Rpb24gKHJlcykge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKHJlcy5yZXNwb25zZS52ZW51ZXMubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb2NhdGlvbkNoZWNraW5zID0gcmVzLnJlc3BvbnNlLnZlbnVlc1swXS5zdGF0cy5jaGVja2luc0NvdW50O1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uQ2hlY2tpbnMgPyBsb2NhdGlvbigpLmNoZWNraW5zKGxvY2F0aW9uQ2hlY2tpbnMpIDogbG9jYXRpb24oKS5jaGVja2lucygwKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbigpLmNoZWNraW5zKDApO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY29sb3IgPSBsb2NhdGlvbigpLmdldENvbG9yKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbigpLm1hcmtlciA9IGNhbGxiYWNrKGxvY2F0aW9uLCBhY3Rpdml0eSwgY29sb3IpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAgICAgLmZhaWwoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBhbGVydCgnVGhlcmUgd2FzIGEgcHJvYmxlbSByZXRyaWV2aW5nIEZvdXJzcXVhcmUgY2hlY2staW5zIGZvciAnICsgbG9jYXRpb24oKS5uYW1lKCkpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgfSwgdGhpcyk7XHJcbiAgICAgICAgfTtcclxuICAgIH07XHJcblxyXG4gICAgd2luZG93LmZvdXJzcXVhcmVTZXJ2aWNlID0gZm91cnNxdWFyZVNlcnZpY2U7XHJcblxyXG59KCkpOyIsIlxyXG4oZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICAvLyBBIGBMb2NhdGlvbmAgcmVwcmVzZW50cyBhbnkgcGxhY2UgcmVzdWx0IG9mIGFuIGFjdGl2aXR5IHF1ZXJ5OyBub3QgdG8gYmUgY29uZnVzZWQgd2l0aCBhIGdlb2xvY2F0aW9uIHdoaWNoXHJcbiAgICAvLyByZXByZXNlbnRzIGEgY2l0eSBvciBnZW9ncmFwaGljIHJlZ2lvbiBwcmVzZW50ZWQgb24gdGhlIG1hcC5cclxuICAgIHZhciBMb2NhdGlvbnNWaWV3TW9kZWwgPSBmdW5jdGlvbiAobWFwVm0sIGZvdXJzcXVhcmVTZXJ2aWNlKSB7XHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAgVG9wLWxldmVsIHZhcmlhYmxlcyBhbmQgcHJvcGVydGllcyBmb3IgYExvY2F0aW9uc1ZpZXdNb2RlbCgpYFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcblxyXG4gICAgICAgIC8vIEluaXRpYWxpemUgYGZpbHRlclF1ZXJ5YCBvYnNlcnZhYmxlIHRvIGJpbmQgdG8gdXNlciBpbnB1dCBpbiB0aGUgbG9jYXRpb25zIGZpbHRlciBmb3JtLlxyXG4gICAgICAgIHZtLmZpbHRlclF1ZXJ5ID0ga28ub2JzZXJ2YWJsZSgnJyk7XHJcblxyXG4gICAgICAgIHZtLnNlbGVjdGVkTG9jYXRpb24gPSBrby5vYnNlcnZhYmxlKCdoZWxsbycpO1xyXG5cclxuICAgICAgICB2bS5hY3Rpdml0aWVzID0ga28ub2JzZXJ2YWJsZUFycmF5KFtdKTtcclxuXHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICBBY3Rpdml0eSBsb2NhdGlvbnMgc2VhcmNoIGZ1bmN0aW9uXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uc2VhcmNoTG9jYXRpb25zID0gZnVuY3Rpb24gKGFjdGl2aXR5KSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgbWFwQm91bmRzID0gd2luZG93Lm1hcC5nZXRCb3VuZHMoKTtcclxuXHJcbiAgICAgICAgICAgIG1hcFZtLnBsYWNlc1NlcnZpY2UudGV4dFNlYXJjaCh7XHJcbiAgICAgICAgICAgICAgICBib3VuZHM6IG1hcEJvdW5kcyxcclxuICAgICAgICAgICAgICAgIHF1ZXJ5OiBhY3Rpdml0eSgpLnRpdGxlXHJcbiAgICAgICAgICAgIH0sIGNhbGxiYWNrKTtcclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIGNhbGxiYWNrKHJlc3VsdHMsIHN0YXR1cykge1xyXG5cclxuICAgICAgICAgICAgICAgIGlmIChzdGF0dXMgPT09IGdvb2dsZS5tYXBzLnBsYWNlcy5QbGFjZXNTZXJ2aWNlU3RhdHVzLk9LICYmXHJcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0cy5sZW5ndGggPiAwKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIHZhciBpbkJvdW5kTG9jYXRpb25zID0gc3VwcHJlc3NPdXRPZkJvdW5kc0xvY2F0aW9ucyhyZXN1bHRzKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgLy8gQ2hlY2sgaWYgbG9jYXRpb25zIGFyZSBmb3VuZCBpbnNpZGUgb2YgdmlzaWJsZSBtYXAgYm91bmRhcmllcy5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoaW5Cb3VuZExvY2F0aW9ucy5sZW5ndGggPiAwKSB7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBDb25zdHJ1Y3QgYExvY2F0aW9uYCBvYnNlcnZhYmxlcyBhbmQgcHVzaCB0byBgYWN0aXZpdHkoKS5yZXN1bHRzYC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgXy5lYWNoKGluQm91bmRMb2NhdGlvbnMsIGZ1bmN0aW9uIChsb2NhdGlvbkRhdGEpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZhciBsb2MgPSBrby5vYnNlcnZhYmxlKG5ldyBMb2NhdGlvbihsb2NhdGlvbkRhdGEpKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZXF1ZXN0IGZvdXJzcXVhcmUgZGF0YSBmb3IgZWFjaCBsb2NhdGlvbiAmIHNhdmUgdGhlIHJlc3VsdHMgYXMgYSBsb2NhdGlvbiBwcm9wZXJ0eS5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHZtLnJlcXVlc3RGb3Vyc3F1YXJlRGF0YShsb2MsIGFjdGl2aXR5LCBtYXBWbS5hZGRNYXJrZXIpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5KCkucmVzdWx0cy5wdXNoKGxvYyk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSBhY3Rpdml0eSB3YXMgcHJldmlvdXNseSBtYWRlIGludmlzaWJsZSBkdWUgdG8gdGhlcmUgYmVpbmcgbm8gbG9jYXRpb24gcmVzdWx0cyBmb3IgYVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBwcmV2aW91cyBnZW9sb2NhdGlvbiwgc2V0IHRoZSB2aXNpYmlsaXR5IHRvIHRydWUgc28gdGhhdCB0aGUgcmVzdWx0cyB3aWxsIGJlIGRpc3BsYXllZC5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGl2aXR5KCkubm9SZXN1bHRzRm9yTGFzdEdlb2xvY2F0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eSgpLm5vUmVzdWx0c0Zvckxhc3RHZW9sb2NhdGlvbiA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHkoKS52aXNpYmxlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5hY3Rpdml0aWVzLnB1c2goYWN0aXZpdHkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHkoKS52aXNpYmxlKGZhbHNlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHkoKS5ub1Jlc3VsdHNGb3JMYXN0R2VvbG9jYXRpb24gPSB0cnVlO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2Ugc3RpbGwgd2FudCB0byBzYXZlIHRoZSBhY3Rpdml0eSBzbyB0aGF0IGl0IGNhbiBiZSBxdWVyaWVkIGFnYWluIGZvciBuZXcgZ2VvbG9jYXRpb25zLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICB2bS5hY3Rpdml0aWVzLnB1c2goYWN0aXZpdHkpO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgYWxlcnQoJ1NvcnJ5LCB0aGVyZSBhcmUgbm8gbG9jYXRpb25zIGZvciAnICsgYWN0aXZpdHkoKS50aXRsZSArICcgaW4gdGhlIGN1cnJlbnQgbWFwIGJvdW5kcy4nKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICBhbGVydCgnU29ycnksIHRoZXJlIHdhcyBhIHByb2JsZW0gcmV0cmlldmluZyByZXN1bHRzIGZvciB0aGUgZm9sbG93aW5nIHJlYXNvbjogJyArIHN0YXR1cyk7XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgIGZ1bmN0aW9uIHN1cHByZXNzT3V0T2ZCb3VuZHNMb2NhdGlvbnMobG9jYXRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgbG9jTGF0LCBsb2NMbmc7XHJcbiAgICAgICAgICAgICAgICB2YXIgaW5Cb3VuZExvY2F0aW9ucyA9IFtdO1xyXG4gICAgICAgICAgICAgICAgXy5lYWNoKGxvY2F0aW9ucywgZnVuY3Rpb24gKGxvY2F0aW9uKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jTGF0ID0gbG9jYXRpb24uZ2VvbWV0cnkubG9jYXRpb24ubGF0KCk7XHJcbiAgICAgICAgICAgICAgICAgICAgbG9jTG5nID0gbG9jYXRpb24uZ2VvbWV0cnkubG9jYXRpb24ubG5nKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIC8vIFN0b3JlIGVhY2ggYGxvY2F0aW9uYCBvbmx5IGlmIGl0IGlzIGNvbnRhaW5lZCB3aXRoaW4gdGhlIG1hcCBib3VuZGFyaWVzIGF0IGN1cnJlbnQgem9vbSBsZXZlbC5cclxuICAgICAgICAgICAgICAgICAgICBpZiAobWFwQm91bmRzLkguSCA8IGxvY0xhdCAmJiBsb2NMYXQgPCBtYXBCb3VuZHMuSC5qICYmXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcEJvdW5kcy5qLkggPiBsb2NMbmcgJiYgbG9jTG5nID4gbWFwQm91bmRzLmouaikge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5Cb3VuZExvY2F0aW9ucy5wdXNoKGxvY2F0aW9uKTtcclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5Cb3VuZExvY2F0aW9ucztcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAgUmV0cmlldmUgZm91cnNxdWFyZSBkYXRhXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0ucmVxdWVzdEZvdXJzcXVhcmVEYXRhID0gZnVuY3Rpb24gKGxvY2F0aW9uLCBhY3Rpdml0eSwgY2FsbGJhY2spIHtcclxuICAgICAgICAgICAgZm91cnNxdWFyZVNlcnZpY2UubWFrZVF1ZXJ5VXJsKGxvY2F0aW9uKTtcclxuICAgICAgICAgICAgZm91cnNxdWFyZVNlcnZpY2UuZ2V0Q2hlY2tpbnNDb3VudEZvcihsb2NhdGlvbiwgYWN0aXZpdHksIGNhbGxiYWNrKTtcclxuICAgICAgICB9O1xyXG5cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogIExvY2F0aW9ucyBmaWx0ZXIgZnVuY3Rpb25cclxuICAgICAgICAgKi9cclxuICAgICAgICB2bS5maWx0ZXJRdWVyeS5zdWJzY3JpYmUoZnVuY3Rpb24gZmlsdGVyQWxnb3JpdGhtKCkge1xyXG5cclxuICAgICAgICAgICAgaWYgKGZpbHRlcklucHV0SXNFbXB0eSgpKSB7XHJcbiAgICAgICAgICAgICAgICB1bmZpbHRlclJlc3VsdHMoKTtcclxuICAgICAgICAgICAgICAgIG1hcFZtLnNob3dNYXJrZXJzRm9yVmlzaWJsZUFjdGl2aXRpZXModm0uYWN0aXZpdGllcyk7XHJcblxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgZmlsdGVyUmVzdWx0cygpO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAvLyBUT0RPOiByZWRpc3BsYXkgc2VsZWN0ZWQgbG9jYXRpb24gaW5mbyB3aW5kb3cgYWZ0ZXIgZmlsdGVyLlxyXG4gICAgICAgICAgICBmdW5jdGlvbiBmaWx0ZXJSZXN1bHRzKCkge1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgICAgICB2YXIgYWN0aXZpdHlWaXNpYmlsaXR5RHVyaW5nRmlsdGVyO1xyXG5cclxuICAgICAgICAgICAgICAgIF8uZWFjaCh2bS5hY3Rpdml0aWVzKCksIGZ1bmN0aW9uIChhY3Rpdml0eSkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZpdHkoKS5yZXN1bHRzKCkubGVuZ3RoID4gMCkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgXy5lYWNoKGFjdGl2aXR5KCkucmVzdWx0cygpLCBmdW5jdGlvbiAobG9jYXRpb24pIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBIaWRlIHRoZSBsb2NhdGlvbiBsaXN0IGl0ZW1zIGFuZCBtYXAgbWFya2VycyBmb3IgZmlsdGVyZWQtb3V0IGxvY2F0aW9ucy5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmKCAhKGxvY2F0aW9uKCkuY29udGFpbnModm0uZmlsdGVyUXVlcnkoKSkpICkge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBsb2NhdGlvbigpLnZpc2libGUoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcFZtLmhpZGVNYXJrZXIobG9jYXRpb24pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAobG9jYXRpb24oKS5zZWxlY3RlZCgpID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcFZtLnJlc2V0SW5mb1dpbmRvdygpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlIGBhY3Rpdml0eVZpc2liaWxpdHlEdXJpbmdGaWx0ZXJgIGFuZCBgaGFzRmlsdGVyUmVzdWx0c2Agc3RhdGVzIHdpbGwgb25seSByZW1haW5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBmYWxzZSBpZiB0aGVyZSBhcmUgemVybyBsb2NhdGlvbiByZXN1bHRzIHdpdGhpbiBhbiBhY3Rpdml0eSBjb250YWluaW5nIHRoZSBmaWx0ZXJcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBxdWVyeSBzdHJpbmcuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHlWaXNpYmlsaXR5RHVyaW5nRmlsdGVyID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHkoKS5oYXNGaWx0ZXJSZXN1bHRzKGZhbHNlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBSZS1kaXNwbGF5IHByZXZpb3VzbHkgaGlkZGVuIGxvY2F0aW9ucyBhbmQgbWFya2VycyAod2hlbiBgYmFja3NwYWNlYCBpcyBwcmVzc2VkLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIGZvciBpbnN0YW5jZSkuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24oKS52aXNpYmxlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5KCkuaGFzRmlsdGVyUmVzdWx0cyh0cnVlKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGl2aXR5KCkuY2hlY2tlZCgpID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1hcFZtLnNob3dNYXJrZXIobG9jYXRpb24pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLy8gUmVvcGVuIGluZm8gd2luZG93IGZvciBzZWxlY3RlZCBsb2NhdGlvbi5cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2F0aW9uKCkuc2VsZWN0ZWQoKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFwVm0uaW5mb1dpbmRvdygpLm9wZW4od2luZG93Lm1hcCwgbG9jYXRpb24oKS5tYXJrZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgICAgICB9KTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIENoZWNrIGlmIGFueSBhY3Rpdml0eSBsb2NhdGlvbnMgaGF2ZSBhcmUgdmlzaWJsZSBhZ2FpbiwgYW5kIGlmIHNvIHNldFxyXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBgYWN0aXZpdHlWaXNpYmlsaXR5RHVyaW5nRmlsdGVyYCB0byB0cnVlIChzbyBsb25nIGFzIHRoZSBhY3Rpdml0eSB3YXMgYGNoZWNrZWRgIHByaW9yIHRvXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHN0YXJ0aW5nIHRoZSBmaWx0ZXIgcXVlcnkpLlxyXG4gICAgICAgICAgICAgICAgICAgICAgICBfLnNvbWUoYWN0aXZpdHkoKS5yZXN1bHRzKCksIGZ1bmN0aW9uIChsb2NhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGxvY2F0aW9uKCkudmlzaWJsZSgpICYmIGFjdGl2aXR5KCkuY2hlY2tlZCgpID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYWN0aXZpdHlWaXNpYmlsaXR5RHVyaW5nRmlsdGVyID0gdHJ1ZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eSgpLmhhc0ZpbHRlclJlc3VsdHModHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRoZSBVSSBhZnRlciBldmVyeSBrZXlzdHJva2UuXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5KCkudmlzaWJsZShhY3Rpdml0eVZpc2liaWxpdHlEdXJpbmdGaWx0ZXIpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiBmaWx0ZXJJbnB1dElzRW1wdHkoKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdm0uZmlsdGVyUXVlcnkoKS50cmltKCkgPT09ICcnO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBmdW5jdGlvbiB1bmZpbHRlclJlc3VsdHMoKSB7XHJcbiAgICAgICAgICAgICAgICBfLmVhY2godm0uYWN0aXZpdGllcygpLCBmdW5jdGlvbiAoYWN0aXZpdHkpIHtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgXy5lYWNoKGFjdGl2aXR5KCkucmVzdWx0cygpLCBmdW5jdGlvbiAobG9jYXRpb24pIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgbG9jYXRpb24oKS52aXNpYmxlKHRydWUpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgICAgICByZXNldEluaXRpYWxWaXNpYmlsaXR5KGFjdGl2aXR5KTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICAgICAgICAgIGZ1bmN0aW9uIHJlc2V0SW5pdGlhbFZpc2liaWxpdHkoYWN0aXZpdHkpIHtcclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZpdHkoKS5yZXN1bHRzKCkubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5KCkudmlzaWJsZShmYWxzZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG5cclxuICAgICAgICAgICAgICAgICAgICBpZiAoYWN0aXZpdHkoKS5jaGVja2VkKCkgPT09IHRydWUpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGFjdGl2aXR5KCkucmVzdWx0cygpLmxlbmd0aCA+IDApIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5KCkudmlzaWJsZSh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGFjdGl2aXR5KCkuaGFzRmlsdGVyUmVzdWx0cyh0cnVlKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChhY3Rpdml0eSgpLnJlc3VsdHMoKS5sZW5ndGggPiAwKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBhY3Rpdml0eSgpLmhhc0ZpbHRlclJlc3VsdHModHJ1ZSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH1cclxuXHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIC8vIEhhY2sgdG8gcHJldmVudCBwYWdlIHJlbG9hZCBvbiB0aGUgZmlsdGVyIGZvcm0gc3VibWlzc2lvbi5cclxuICAgICAgICB2bS5wcmV2ZW50RGVmYXVsdCA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgLy8gKGRvIG5vdGhpbmcuKVxyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAgVXBkYXRlIGxvY2F0aW9ucyB3aGVuIHRoZSBnZW9sb2NhdGlvbiBjaGFuZ2VzXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgbWFwVm0uY3VycmVudEdlb2xvY2F0aW9uLnN1YnNjcmliZShmdW5jdGlvbiB1cGRhdGVMb2NhdGlvbnMoKSB7XHJcblxyXG4gICAgICAgICAgICB2YXIgY29weTtcclxuXHJcbiAgICAgICAgICAgIGlmICh2bS5hY3Rpdml0aWVzKCkpXHJcbiAgICAgICAgICAgICAgICBjb3B5ID0gdm0uYWN0aXZpdGllcygpO1xyXG5cclxuICAgICAgICAgICAgLy8gQ2xlYXIgY3VycmVudGx5IGRpc3BsYXllZCBtYXAgbWFya2VycywgYW5kIGNsZWFyIHN0b3JlZCBMb2NhdGlvbiByZXN1bHRzLiBPbmx5IGNsZWFyaW5nIHRoZSBlbnRpcmVcclxuICAgICAgICAgICAgLy8gYHZtLmFjdGl2aXRpZXMoKWAsIGFzIGJlbG93IG9iamVjdCBkb2VzIG5vdCB1cGRhdGUgdGhlIFVJIGluIHRoZSB3YXkgb25lIHdvdWxkIGV4cGVjdDsgd2l0aG91dCBpdGVyYXRpbmdcclxuICAgICAgICAgICAgLy8gb3ZlciB0aGUgYWN0aXZpdHkgcmVzdWx0cywgdGhlIGxvY2F0aW9uIHJlc3VsdHMgZm9yIHRoZSBwcmV2aW91cyBnZW9sb2NhdGlvbiBjb250aW51ZSB0byBhcHBlYXIuXHJcbiAgICAgICAgICAgIF8uZWFjaCh2bS5hY3Rpdml0aWVzKCksIGZ1bmN0aW9uIChhY3Rpdml0eSkge1xyXG4gICAgICAgICAgICAgICAgXy5lYWNoKGFjdGl2aXR5KCkucmVzdWx0cygpLCBmdW5jdGlvbiAobG9jYXRpb24pe1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uKCkubWFya2VyLnNldE1hcChudWxsKTtcclxuICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgYWN0aXZpdHkoKS5yZXN1bHRzKFtdKTtcclxuICAgICAgICAgICAgfSk7XHJcblxyXG4gICAgICAgICAgICB2bS5hY3Rpdml0aWVzKFtdKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBMb2NhdGlvbiByZXN1bHRzIGZvciBuZXcgR2VvbG9jYXRpb25cclxuICAgICAgICAgICAgXy5lYWNoKGNvcHksIGZ1bmN0aW9uIChhY3Rpdml0eSkge1xyXG4gICAgICAgICAgICAgICAgdm0uc2VhcmNoTG9jYXRpb25zKGFjdGl2aXR5KTtcclxuICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgfSk7XHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAgU2VsZWN0ZWQgbG9jYXRpb24gZnVuY3Rpb25zXHJcbiAgICAgICAgICovXHJcbiAgICAgICAgdm0uc2VsZWN0TG9jYXRpb24gPSBmdW5jdGlvbiAobG9jYXRpb24pIHtcclxuXHJcbiAgICAgICAgICAgIC8vIFVuLXNlbGVjdCBhbGwgbG9jYXRpb25zIHNvIHRoYXQgb25seSBvbmUgbG9jYXRpb24gYXBwZWFycyBzZWxlY3RlZCBhdCBhIHRpbWUuXHJcbiAgICAgICAgICAgIHZtLmNsZWFyQ3VycmVudFNlbGVjdGlvbnMoKTtcclxuXHJcbiAgICAgICAgICAgIC8vIFRoZSBgc2VsZWN0ZWQoKWAgb2JzZXJ2YWJsZSBwcm9wZXJ0eSBpcyB1c2VkIHRvIGNvbnRyb2wgdGhlIGNzcyBgYmFja2dyb3VuZC1jb2xvcmAgb2YgdGhlIGxvY2F0aW9uIGVsZW1lbnQuXHJcbiAgICAgICAgICAgIGxvY2F0aW9uLnNlbGVjdGVkKHRydWUpO1xyXG4gICAgICAgICAgICB2bS5zZWxlY3RlZExvY2F0aW9uKGxvY2F0aW9uKTtcclxuXHJcbiAgICAgICAgICAgIG1hcFZtLnNob3dJbmZvV2luZG93KGxvY2F0aW9uKTtcclxuICAgICAgICAgICAgbWFwVm0uY2VudGVyTWFwQXQobG9jYXRpb24pO1xyXG4gICAgICAgICAgICBtYXBWbS5ib3VuY2VBbmltYXRlKGxvY2F0aW9uLm1hcmtlcik7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0uY2xlYXJDdXJyZW50U2VsZWN0aW9ucyA9IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgXy5lYWNoKHZtLmFjdGl2aXRpZXMoKSwgZnVuY3Rpb24gKGFjdGl2aXR5KSB7XHJcbiAgICAgICAgICAgICAgICBfLmVhY2goYWN0aXZpdHkoKS5yZXN1bHRzKCksIGZ1bmN0aW9uIChsb2NhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgICAgIGxvY2F0aW9uKCkuc2VsZWN0ZWQoZmFsc2UpO1xyXG4gICAgICAgICAgICAgICAgfSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLmFzc2lnbkNvbG9yc1RvTG9jYXRpb25zID0gZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5nZXRSZWZlcmVuY2VUb0FjdGl2aXRpZXNPYmplY3QgPSBmdW5jdGlvbiAoYWN0aXZpdGllcykge1xyXG4gICAgICAgICAgICB2bS5hY3Rpdml0aWVzID0gYWN0aXZpdGllcztcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5wYXNzU2VsZlRvTWFwVm0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIG1hcFZtLmxvY2F0aW9uc1ZtID0gdm07XHJcbiAgICAgICAgfTtcclxuICAgICAgICB2bS5wYXNzU2VsZlRvTWFwVm0oKTtcclxuXHJcbiAgICAgICAgdm0ucGFzc1NlbGVjdGVkTG9jYXRpb25Ub01hcFZtID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBtYXBWbS5zZWxlY3RlZExvY2F0aW9uKHZtLnNlbGVjdGVkTG9jYXRpb24pO1xyXG4gICAgICAgIH07XHJcblxyXG4gICAgICAgIHZtLnNlbGVjdGVkTG9jYXRpb24uc3Vic2NyaWJlKGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICB2bS5wYXNzU2VsZWN0ZWRMb2NhdGlvblRvTWFwVm0oKTtcclxuICAgICAgICB9KTtcclxuICAgIH07XHJcblxyXG4gICAgd2luZG93LkxvY2F0aW9uc1ZpZXdNb2RlbCA9IExvY2F0aW9uc1ZpZXdNb2RlbDtcclxuXHJcbn0pKCk7XHJcblxyXG4iLCJcclxuKGZ1bmN0aW9uICgpIHtcclxuXHJcbiAgICAndXNlIHN0cmljdCc7XHJcblxyXG4gICAgdmFyIEFjdGl2aXRpZXNWaWV3TW9kZWwgPSBmdW5jdGlvbiAobWFwVm0sIGxvY2F0aW9uc1ZtKSB7XHJcblxyXG4gICAgICAgIC8qKlxyXG4gICAgICAgICAqICBUb3AtbGV2ZWwgdmFyaWFibGVzIGFuZCBwcm9wZXJ0aWVzIGZvciBgQWN0aXZpdGllc1ZpZXdNb2RlbCgpYFxyXG4gICAgICAgICAqL1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcblxyXG4gICAgICAgIHZtLmRlZmF1bHRBY3Rpdml0aWVzID0gW1xyXG4gICAgICAgICAgICAnQ29mZmVlJyxcclxuICAgICAgICAgICAgJ1ZlZ2V0YXJpYW4nLFxyXG4gICAgICAgICAgICAnUGFyaycsXHJcbiAgICAgICAgICAgICdNZXhpY2FuJyxcclxuICAgICAgICAgICAgJ0FydCBHYWxsZXJ5J107XHJcblxyXG4gICAgICAgIHZtLmFjdGl2aXRpZXMgPSBrby5vYnNlcnZhYmxlQXJyYXkoKTtcclxuICAgICAgICB2bS5hY3Rpdml0eVF1ZXJ5ID0ga28ub2JzZXJ2YWJsZSgpO1xyXG5cclxuXHJcbiAgICAgICAgLyoqXHJcbiAgICAgICAgICogIERpc3BsYXkgbG9jYXRpb25zIGZvciBkZWZhdWx0IGFjdGl2aXRpZXNcclxuICAgICAgICAgKi9cclxuXHJcbiAgICAgICAgICAgIC8vIFNlYXJjaCBmb3IgKGFuZCBkaXNwbGF5KSBsb2NhdGlvbnMgZm9yIHRoZSBkZWZhdWx0IGFjdGl2aXRpZXMgb25jZSB0aGUgbWFwIGhhcyBmdWxseSBsb2FkZWQgYW5kIEdvb2dsZSBQbGFjZXNcclxuICAgICAgICAgICAgLy8gU2VydmljZSBpcyByZWFkeSB0byByZWNlaXZlIHF1ZXJpZXMuXHJcbiAgICAgICAgbWFwVm0ucmVhZHlTdGF0ZS5zdWJzY3JpYmUoZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICBpZiAobWFwVm0ucmVhZHlTdGF0ZSgpID09PSB0cnVlKSB7XHJcbiAgICAgICAgICAgICAgICB2bS5kaXNwbGF5RGVmYXVsdEFjdGl2aXRpZXMoKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICB2bS5kaXNwbGF5RGVmYXVsdEFjdGl2aXRpZXMgPSBmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgICAgICAgICB2bS5wYXNzUmVmZXJlbmNlVG9Mb2NhdGlvbnNWbSgpO1xyXG5cclxuICAgICAgICAgICAgXy5lYWNoKHZtLmRlZmF1bHRBY3Rpdml0aWVzLCBmdW5jdGlvbiAoYWN0aXZpdHlOYW1lKSB7XHJcbiAgICAgICAgICAgICAgICB2YXIgYWN0aXZpdHkgPSBrby5vYnNlcnZhYmxlKG5ldyBBY3Rpdml0eShhY3Rpdml0eU5hbWUpKTtcclxuICAgICAgICAgICAgICAgIGxvY2F0aW9uc1ZtLnNlYXJjaExvY2F0aW9ucyhhY3Rpdml0eSk7XHJcbiAgICAgICAgICAgIH0pO1xyXG4gICAgICAgIH07XHJcblxyXG5cclxuICAgICAgICAvKipcclxuICAgICAgICAgKiAgTmV3IGFjdGl2aXR5IGZ1bmN0aW9uc1xyXG4gICAgICAgICAqL1xyXG5cclxuICAgICAgICAgICAgLy8gVE9ETzogVmFsaWRhdGUgaW5wdXQgYW5kIGhhbmRsZSBkdXBsaWNhdGVzIChhbHNvIHdoYXQgZG8gZG8gYWZ0ZXIgbWFwIGlzIHJlc2l6ZWQpLlxyXG4gICAgICAgIHZtLmFkZEFjdGl2aXR5ID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgICAgICB2YXIgYWN0aXZpdHkgPSBrby5vYnNlcnZhYmxlKG5ldyBBY3Rpdml0eSh2bS5hY3Rpdml0eVF1ZXJ5KCkpKTtcclxuICAgICAgICAgICAgbG9jYXRpb25zVm0uc2VhcmNoTG9jYXRpb25zKGFjdGl2aXR5KTtcclxuICAgICAgICAgICAgdm0uYWN0aXZpdHlRdWVyeSgnJyk7XHJcbiAgICAgICAgfTtcclxuXHJcbiAgICAgICAgdm0ucGFzc1JlZmVyZW5jZVRvTG9jYXRpb25zVm0gPSBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIGxvY2F0aW9uc1ZtLmdldFJlZmVyZW5jZVRvQWN0aXZpdGllc09iamVjdCh2bS5hY3Rpdml0aWVzKTtcclxuICAgICAgICB9O1xyXG5cclxuICAgICAgICB2bS5hY3Rpdml0aWVzLnN1YnNjcmliZShmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgIHZtLnBhc3NSZWZlcmVuY2VUb0xvY2F0aW9uc1ZtKCk7XHJcbiAgICAgICAgfSk7XHJcblxyXG4gICAgICAgIHZtLnJlc2V0SW5mb1dpbmRvd1doZW5TZWxlY3RlZExvY2F0aW9uVG9nZ2xlZFZpc2libGUgPSBmdW5jdGlvbiAoYWN0aXZpdHkpIHtcclxuXHJcbiAgICAgICAgICAgIF8uZWFjaChhY3Rpdml0eS5yZXN1bHRzKCksIGZ1bmN0aW9uIChsb2NhdGlvbikge1xyXG4gICAgICAgICAgICAgICAgaWYgKGxvY2F0aW9uKCkuc2VsZWN0ZWQoKSA9PT0gdHJ1ZSkge1xyXG4gICAgICAgICAgICAgICAgICAgIHN3aXRjaCAoYWN0aXZpdHkuY2hlY2tlZCgpKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIGNhc2UgZmFsc2U6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBWbS5yZXNldEluZm9XaW5kb3coKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBjYXNlIHRydWU6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYXBWbS5pbmZvV2luZG93KCkub3Blbih3aW5kb3cubWFwLCBsb2NhdGlvbigpLm1hcmtlcik7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfTtcclxuICAgICAgICBcclxuICAgIH07XHJcblxyXG4gICAgd2luZG93LkFjdGl2aXRpZXNWaWV3TW9kZWwgPSBBY3Rpdml0aWVzVmlld01vZGVsO1xyXG5cclxufSgpKTtcclxuIiwiXHJcbihmdW5jdGlvbiAoKSB7XHJcblxyXG4gICAgJ3VzZSBzdHJpY3QnO1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogTWFzdGVyIFZpZXdNb2RlbCBjb25zdHJ1Y3RvclxyXG4gICAgICovXHJcbiAgICB2YXIgQXBwVmlld01vZGVsID0gZnVuY3Rpb24gKCkge1xyXG4gICAgICAgIHZhciB2bSA9IHRoaXM7XHJcblxyXG4gICAgICAgIHZtLmZvdXJzcXVhcmVTZXJ2aWNlID0gbmV3IGZvdXJzcXVhcmVTZXJ2aWNlKCk7XHJcblxyXG4gICAgICAgIHZtLk1hcFZpZXdNb2RlbCA9IG5ldyBNYXBWaWV3TW9kZWwodm0uZm91cnNxdWFyZVNlcnZpY2UpO1xyXG4gICAgICAgIHZtLkxvY2F0aW9uc1ZpZXdNb2RlbCA9IG5ldyBMb2NhdGlvbnNWaWV3TW9kZWwodm0uTWFwVmlld01vZGVsLCB2bS5mb3Vyc3F1YXJlU2VydmljZSk7XHJcbiAgICAgICAgdm0uQWN0aXZpdGllc1ZpZXdNb2RlbCA9IG5ldyBBY3Rpdml0aWVzVmlld01vZGVsKHZtLk1hcFZpZXdNb2RlbCwgdm0uTG9jYXRpb25zVmlld01vZGVsKTtcclxuXHJcbiAgICB9O1xyXG5cclxuICAgIHdpbmRvdy5BcHBWaWV3TW9kZWwgPSBBcHBWaWV3TW9kZWw7XHJcblxyXG59KCkpO1xyXG5cclxuXHJcbiIsIlxyXG4oZnVuY3Rpb24gKCkge1xyXG5cclxuICAgICd1c2Ugc3RyaWN0JztcclxuXHJcbiAgICAvKipcclxuICAgICAqICBJbml0aWFsaXplIHRoZSBtYXN0ZXIgVmlld01vZGVsXHJcbiAgICAgKi9cclxuICAgIHZhciBhcHAgPSBuZXcgQXBwVmlld01vZGVsKCk7XHJcblxyXG5cclxuICAgIC8qKlxyXG4gICAgICogIFJlbmRlciB0aGUgVUkgY29tcG9uZW50cywgYW5kIGFwcGx5IGtub2Nrb3V0IGRhdGEgYmluZGluZ3NcclxuICAgICAqL1xyXG4gICAgZGlzcGxheUNvbXBvbmVudHMoWydzZWFyY2hiYXInLCAnc2lkZWJhciddKTtcclxuXHJcbiAgICAvLyBGb3IgdGhpcyBwcm9qZWN0LCBJIGRlY2lkZWQgdG8gbWFrZSB0aGlzIGNvbXBvbmVudCBsb2FkZXIgaW4gbGlldSBvZiB1c2luZyBzb21ldGhpbmcgbGlrZSByZXF1aXJlanMuIEkgZGlkXHJcbiAgICAvLyBhdHRlbXB0IHRvIGltcGxlbWVudCByZXF1aXJlanMsIGJ1dCB0aGUgY29uc29sZSBlcnJvcnMgZGlkbid0IHByb3ZpZGUgbWUgd2l0aCBzcGVjaWZpYyBlbm91Z2ggaW5mb3JtYXRpb24gdG9cclxuICAgIC8vIHNvcnQgb3V0IHdoYXQgd2FzIHdyb25nIHdpdGggbXkgY29kZS4gSW4gYW55IGNhc2UsIGZvciB0aGUgc2NvcGUgb2YgdGhpcyBzaW5nbGUtcGFnZS1hcHAsIG15IHNvbHV0aW9uIHNlZW1zIHRvXHJcbiAgICAvLyB3b3JrIGZpbmUuXHJcbiAgICBmdW5jdGlvbiBkaXNwbGF5Q29tcG9uZW50cyhjb21wb25lbnRzKSB7XHJcblxyXG4gICAgICAgIHZhciAkY29tcG9uZW50LCB0ZW1wbGF0ZVVybCwgaWQsIGh0bWw7XHJcbiAgICAgICAgXy5lYWNoKGNvbXBvbmVudHMsIGZ1bmN0aW9uIChjb21wb25lbnQpIHtcclxuXHJcbiAgICAgICAgICAgIHZhciBjb250YWluZXIgPSAnI292ZXJsYXktJyArIGNvbXBvbmVudDtcclxuICAgICAgICAgICAgJGNvbXBvbmVudCA9ICQoJzxkaXY+Jyk7XHJcbiAgICAgICAgICAgIHRlbXBsYXRlVXJsID0gJy4vYnVpbGQvY29tcG9uZW50cy8nICsgY29tcG9uZW50ICsgJy8nICsgY29tcG9uZW50ICsgJy5odG1sJztcclxuICAgICAgICAgICAgaWQgPSAnIycgKyBjb21wb25lbnQ7XHJcblxyXG4gICAgICAgICAgICAkY29tcG9uZW50LmxvYWQodGVtcGxhdGVVcmwsIGlkLCBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICBodG1sID0gJCh0aGlzKS5wcm9wKCdvdXRlckhUTUwnKTtcclxuICAgICAgICAgICAgICAgICQoY29udGFpbmVyKS5hcHBlbmQoaHRtbCk7XHJcblxyXG4gICAgICAgICAgICAgICAga28uYXBwbHlCaW5kaW5ncyhhcHAsIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvbXBvbmVudCkpO1xyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxuXHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiAgTWFrZSB0aGUgVUkgY29tcG9uZW50cyBkcmFnZ2FibGVcclxuICAgICAqL1xyXG4gICAgLy8gU29ycnkhIEkgc3RpbGwgaGFkIHRvIHNsYW5nIGEgbGl0dGxlIGJpdCBvZiBqUXVlcnkgdXAgaW4gdGhpcyBhcHAuXHJcbiAgICAkKGRvY3VtZW50KS5yZWFkeShcclxuICAgICAgICBmdW5jdGlvbigpIHtcclxuXHJcbiAgICAgICAgICAgICQoJyNvdmVybGF5LXNlYXJjaGJhcicpLmRyYWdnYWJsZSgpO1xyXG4gICAgICAgICAgICAkKCcjb3ZlcmxheS1zaWRlYmFyJykuZHJhZ2dhYmxlKCk7XHJcblxyXG4gICAgICAgICAgICAkKGRvY3VtZW50KS5vbignY2xpY2snLCAnI3RvZ2dsZS1taW5pbWl6ZS1zaWRlYmFyJywgZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICAkKHRoaXMpLnBhcmVudCgpLnRvZ2dsZUNsYXNzKCdzaG93Jyk7XHJcbiAgICAgICAgICAgIH0pO1xyXG5cclxuICAgICAgICB9KTtcclxuXHJcbn0oKSk7XHJcbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==
